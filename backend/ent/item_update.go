// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/category"
	"selfregi/ent/images"
	"selfregi/ent/item"
	"selfregi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ItemUpdate) SetUpdatedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ItemUpdate) SetDeletedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDeletedAt(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ItemUpdate) ClearDeletedAt() *ItemUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetName sets the "name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetCategoryID sets the "category_id" field.
func (iu *ItemUpdate) SetCategoryID(i int) *ItemUpdate {
	iu.mutation.SetCategoryID(i)
	return iu
}

// SetIsDisplay sets the "is_display" field.
func (iu *ItemUpdate) SetIsDisplay(b bool) *ItemUpdate {
	iu.mutation.SetIsDisplay(b)
	return iu
}

// SetNillableIsDisplay sets the "is_display" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableIsDisplay(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetIsDisplay(*b)
	}
	return iu
}

// SetTax sets the "tax" field.
func (iu *ItemUpdate) SetTax(i int) *ItemUpdate {
	iu.mutation.ResetTax()
	iu.mutation.SetTax(i)
	return iu
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTax(i *int) *ItemUpdate {
	if i != nil {
		iu.SetTax(*i)
	}
	return iu
}

// AddTax adds i to the "tax" field.
func (iu *ItemUpdate) AddTax(i int) *ItemUpdate {
	iu.mutation.AddTax(i)
	return iu
}

// ClearTax clears the value of the "tax" field.
func (iu *ItemUpdate) ClearTax() *ItemUpdate {
	iu.mutation.ClearTax()
	return iu
}

// SetTaxRate sets the "tax_rate" field.
func (iu *ItemUpdate) SetTaxRate(i int) *ItemUpdate {
	iu.mutation.ResetTaxRate()
	iu.mutation.SetTaxRate(i)
	return iu
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTaxRate(i *int) *ItemUpdate {
	if i != nil {
		iu.SetTaxRate(*i)
	}
	return iu
}

// AddTaxRate adds i to the "tax_rate" field.
func (iu *ItemUpdate) AddTaxRate(i int) *ItemUpdate {
	iu.mutation.AddTaxRate(i)
	return iu
}

// ClearTaxRate clears the value of the "tax_rate" field.
func (iu *ItemUpdate) ClearTaxRate() *ItemUpdate {
	iu.mutation.ClearTaxRate()
	return iu
}

// SetPrice sets the "price" field.
func (iu *ItemUpdate) SetPrice(i int) *ItemUpdate {
	iu.mutation.ResetPrice()
	iu.mutation.SetPrice(i)
	return iu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePrice(i *int) *ItemUpdate {
	if i != nil {
		iu.SetPrice(*i)
	}
	return iu
}

// AddPrice adds i to the "price" field.
func (iu *ItemUpdate) AddPrice(i int) *ItemUpdate {
	iu.mutation.AddPrice(i)
	return iu
}

// ClearPrice clears the value of the "price" field.
func (iu *ItemUpdate) ClearPrice() *ItemUpdate {
	iu.mutation.ClearPrice()
	return iu
}

// SetTemporaryStock sets the "temporary_stock" field.
func (iu *ItemUpdate) SetTemporaryStock(i int) *ItemUpdate {
	iu.mutation.ResetTemporaryStock()
	iu.mutation.SetTemporaryStock(i)
	return iu
}

// SetNillableTemporaryStock sets the "temporary_stock" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTemporaryStock(i *int) *ItemUpdate {
	if i != nil {
		iu.SetTemporaryStock(*i)
	}
	return iu
}

// AddTemporaryStock adds i to the "temporary_stock" field.
func (iu *ItemUpdate) AddTemporaryStock(i int) *ItemUpdate {
	iu.mutation.AddTemporaryStock(i)
	return iu
}

// ClearTemporaryStock clears the value of the "temporary_stock" field.
func (iu *ItemUpdate) ClearTemporaryStock() *ItemUpdate {
	iu.mutation.ClearTemporaryStock()
	return iu
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (iu *ItemUpdate) AddImageIDs(ids ...int) *ItemUpdate {
	iu.mutation.AddImageIDs(ids...)
	return iu
}

// AddImages adds the "images" edges to the Images entity.
func (iu *ItemUpdate) AddImages(i ...*Images) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddImageIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (iu *ItemUpdate) SetCategory(c *Category) *ItemUpdate {
	return iu.SetCategoryID(c.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearImages clears all "images" edges to the Images entity.
func (iu *ItemUpdate) ClearImages() *ItemUpdate {
	iu.mutation.ClearImages()
	return iu
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (iu *ItemUpdate) RemoveImageIDs(ids ...int) *ItemUpdate {
	iu.mutation.RemoveImageIDs(ids...)
	return iu
}

// RemoveImages removes "images" edges to Images entities.
func (iu *ItemUpdate) RemoveImages(i ...*Images) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveImageIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (iu *ItemUpdate) ClearCategory() *ItemUpdate {
	iu.mutation.ClearCategory()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if _, ok := iu.mutation.CategoryID(); iu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Item.category"`)
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(item.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(item.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(item.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.IsDisplay(); ok {
		_spec.SetField(item.FieldIsDisplay, field.TypeBool, value)
	}
	if value, ok := iu.mutation.Tax(); ok {
		_spec.SetField(item.FieldTax, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedTax(); ok {
		_spec.AddField(item.FieldTax, field.TypeInt, value)
	}
	if iu.mutation.TaxCleared() {
		_spec.ClearField(item.FieldTax, field.TypeInt)
	}
	if value, ok := iu.mutation.TaxRate(); ok {
		_spec.SetField(item.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedTaxRate(); ok {
		_spec.AddField(item.FieldTaxRate, field.TypeInt, value)
	}
	if iu.mutation.TaxRateCleared() {
		_spec.ClearField(item.FieldTaxRate, field.TypeInt)
	}
	if value, ok := iu.mutation.Price(); ok {
		_spec.SetField(item.FieldPrice, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedPrice(); ok {
		_spec.AddField(item.FieldPrice, field.TypeInt, value)
	}
	if iu.mutation.PriceCleared() {
		_spec.ClearField(item.FieldPrice, field.TypeInt)
	}
	if value, ok := iu.mutation.TemporaryStock(); ok {
		_spec.SetField(item.FieldTemporaryStock, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedTemporaryStock(); ok {
		_spec.AddField(item.FieldTemporaryStock, field.TypeInt, value)
	}
	if iu.mutation.TemporaryStockCleared() {
		_spec.ClearField(item.FieldTemporaryStock, field.TypeInt)
	}
	if iu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.CategoryTable,
			Columns: []string{item.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.CategoryTable,
			Columns: []string{item.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ItemUpdateOne) SetUpdatedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ItemUpdateOne) SetDeletedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDeletedAt(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ItemUpdateOne) ClearDeletedAt() *ItemUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetName sets the "name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetCategoryID sets the "category_id" field.
func (iuo *ItemUpdateOne) SetCategoryID(i int) *ItemUpdateOne {
	iuo.mutation.SetCategoryID(i)
	return iuo
}

// SetIsDisplay sets the "is_display" field.
func (iuo *ItemUpdateOne) SetIsDisplay(b bool) *ItemUpdateOne {
	iuo.mutation.SetIsDisplay(b)
	return iuo
}

// SetNillableIsDisplay sets the "is_display" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableIsDisplay(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetIsDisplay(*b)
	}
	return iuo
}

// SetTax sets the "tax" field.
func (iuo *ItemUpdateOne) SetTax(i int) *ItemUpdateOne {
	iuo.mutation.ResetTax()
	iuo.mutation.SetTax(i)
	return iuo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTax(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetTax(*i)
	}
	return iuo
}

// AddTax adds i to the "tax" field.
func (iuo *ItemUpdateOne) AddTax(i int) *ItemUpdateOne {
	iuo.mutation.AddTax(i)
	return iuo
}

// ClearTax clears the value of the "tax" field.
func (iuo *ItemUpdateOne) ClearTax() *ItemUpdateOne {
	iuo.mutation.ClearTax()
	return iuo
}

// SetTaxRate sets the "tax_rate" field.
func (iuo *ItemUpdateOne) SetTaxRate(i int) *ItemUpdateOne {
	iuo.mutation.ResetTaxRate()
	iuo.mutation.SetTaxRate(i)
	return iuo
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTaxRate(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetTaxRate(*i)
	}
	return iuo
}

// AddTaxRate adds i to the "tax_rate" field.
func (iuo *ItemUpdateOne) AddTaxRate(i int) *ItemUpdateOne {
	iuo.mutation.AddTaxRate(i)
	return iuo
}

// ClearTaxRate clears the value of the "tax_rate" field.
func (iuo *ItemUpdateOne) ClearTaxRate() *ItemUpdateOne {
	iuo.mutation.ClearTaxRate()
	return iuo
}

// SetPrice sets the "price" field.
func (iuo *ItemUpdateOne) SetPrice(i int) *ItemUpdateOne {
	iuo.mutation.ResetPrice()
	iuo.mutation.SetPrice(i)
	return iuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePrice(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetPrice(*i)
	}
	return iuo
}

// AddPrice adds i to the "price" field.
func (iuo *ItemUpdateOne) AddPrice(i int) *ItemUpdateOne {
	iuo.mutation.AddPrice(i)
	return iuo
}

// ClearPrice clears the value of the "price" field.
func (iuo *ItemUpdateOne) ClearPrice() *ItemUpdateOne {
	iuo.mutation.ClearPrice()
	return iuo
}

// SetTemporaryStock sets the "temporary_stock" field.
func (iuo *ItemUpdateOne) SetTemporaryStock(i int) *ItemUpdateOne {
	iuo.mutation.ResetTemporaryStock()
	iuo.mutation.SetTemporaryStock(i)
	return iuo
}

// SetNillableTemporaryStock sets the "temporary_stock" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTemporaryStock(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetTemporaryStock(*i)
	}
	return iuo
}

// AddTemporaryStock adds i to the "temporary_stock" field.
func (iuo *ItemUpdateOne) AddTemporaryStock(i int) *ItemUpdateOne {
	iuo.mutation.AddTemporaryStock(i)
	return iuo
}

// ClearTemporaryStock clears the value of the "temporary_stock" field.
func (iuo *ItemUpdateOne) ClearTemporaryStock() *ItemUpdateOne {
	iuo.mutation.ClearTemporaryStock()
	return iuo
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (iuo *ItemUpdateOne) AddImageIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.AddImageIDs(ids...)
	return iuo
}

// AddImages adds the "images" edges to the Images entity.
func (iuo *ItemUpdateOne) AddImages(i ...*Images) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddImageIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (iuo *ItemUpdateOne) SetCategory(c *Category) *ItemUpdateOne {
	return iuo.SetCategoryID(c.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearImages clears all "images" edges to the Images entity.
func (iuo *ItemUpdateOne) ClearImages() *ItemUpdateOne {
	iuo.mutation.ClearImages()
	return iuo
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (iuo *ItemUpdateOne) RemoveImageIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.RemoveImageIDs(ids...)
	return iuo
}

// RemoveImages removes "images" edges to Images entities.
func (iuo *ItemUpdateOne) RemoveImages(i ...*Images) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveImageIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (iuo *ItemUpdateOne) ClearCategory() *ItemUpdateOne {
	iuo.mutation.ClearCategory()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Item)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if _, ok := iuo.mutation.CategoryID(); iuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Item.category"`)
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(item.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(item.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(item.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IsDisplay(); ok {
		_spec.SetField(item.FieldIsDisplay, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.Tax(); ok {
		_spec.SetField(item.FieldTax, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedTax(); ok {
		_spec.AddField(item.FieldTax, field.TypeInt, value)
	}
	if iuo.mutation.TaxCleared() {
		_spec.ClearField(item.FieldTax, field.TypeInt)
	}
	if value, ok := iuo.mutation.TaxRate(); ok {
		_spec.SetField(item.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedTaxRate(); ok {
		_spec.AddField(item.FieldTaxRate, field.TypeInt, value)
	}
	if iuo.mutation.TaxRateCleared() {
		_spec.ClearField(item.FieldTaxRate, field.TypeInt)
	}
	if value, ok := iuo.mutation.Price(); ok {
		_spec.SetField(item.FieldPrice, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedPrice(); ok {
		_spec.AddField(item.FieldPrice, field.TypeInt, value)
	}
	if iuo.mutation.PriceCleared() {
		_spec.ClearField(item.FieldPrice, field.TypeInt)
	}
	if value, ok := iuo.mutation.TemporaryStock(); ok {
		_spec.SetField(item.FieldTemporaryStock, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedTemporaryStock(); ok {
		_spec.AddField(item.FieldTemporaryStock, field.TypeInt, value)
	}
	if iuo.mutation.TemporaryStockCleared() {
		_spec.ClearField(item.FieldTemporaryStock, field.TypeInt)
	}
	if iuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !iuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ImagesTable,
			Columns: item.ImagesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: images.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.CategoryTable,
			Columns: []string{item.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.CategoryTable,
			Columns: []string{item.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
