// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/account"
	"selfregi/ent/cart"
	"selfregi/ent/predicate"
	"selfregi/ent/visitor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorUpdate is the builder for updating Visitor entities.
type VisitorUpdate struct {
	config
	hooks    []Hook
	mutation *VisitorMutation
}

// Where appends a list predicates to the VisitorUpdate builder.
func (vu *VisitorUpdate) Where(ps ...predicate.Visitor) *VisitorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VisitorUpdate) SetUpdatedAt(t time.Time) *VisitorUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VisitorUpdate) SetDeletedAt(t time.Time) *VisitorUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VisitorUpdate) SetNillableDeletedAt(t *time.Time) *VisitorUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VisitorUpdate) ClearDeletedAt() *VisitorUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetName sets the "name" field.
func (vu *VisitorUpdate) SetName(s string) *VisitorUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VisitorUpdate) SetNillableName(s *string) *VisitorUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetSex sets the "sex" field.
func (vu *VisitorUpdate) SetSex(i int) *VisitorUpdate {
	vu.mutation.ResetSex()
	vu.mutation.SetSex(i)
	return vu
}

// AddSex adds i to the "sex" field.
func (vu *VisitorUpdate) AddSex(i int) *VisitorUpdate {
	vu.mutation.AddSex(i)
	return vu
}

// AddManagedAccountIDs adds the "managed_accounts" edge to the Account entity by IDs.
func (vu *VisitorUpdate) AddManagedAccountIDs(ids ...int) *VisitorUpdate {
	vu.mutation.AddManagedAccountIDs(ids...)
	return vu
}

// AddManagedAccounts adds the "managed_accounts" edges to the Account entity.
func (vu *VisitorUpdate) AddManagedAccounts(a ...*Account) *VisitorUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.AddManagedAccountIDs(ids...)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (vu *VisitorUpdate) AddCartIDs(ids ...int) *VisitorUpdate {
	vu.mutation.AddCartIDs(ids...)
	return vu
}

// AddCarts adds the "carts" edges to the Cart entity.
func (vu *VisitorUpdate) AddCarts(c ...*Cart) *VisitorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddCartIDs(ids...)
}

// Mutation returns the VisitorMutation object of the builder.
func (vu *VisitorUpdate) Mutation() *VisitorMutation {
	return vu.mutation
}

// ClearManagedAccounts clears all "managed_accounts" edges to the Account entity.
func (vu *VisitorUpdate) ClearManagedAccounts() *VisitorUpdate {
	vu.mutation.ClearManagedAccounts()
	return vu
}

// RemoveManagedAccountIDs removes the "managed_accounts" edge to Account entities by IDs.
func (vu *VisitorUpdate) RemoveManagedAccountIDs(ids ...int) *VisitorUpdate {
	vu.mutation.RemoveManagedAccountIDs(ids...)
	return vu
}

// RemoveManagedAccounts removes "managed_accounts" edges to Account entities.
func (vu *VisitorUpdate) RemoveManagedAccounts(a ...*Account) *VisitorUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.RemoveManagedAccountIDs(ids...)
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (vu *VisitorUpdate) ClearCarts() *VisitorUpdate {
	vu.mutation.ClearCarts()
	return vu
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (vu *VisitorUpdate) RemoveCartIDs(ids ...int) *VisitorUpdate {
	vu.mutation.RemoveCartIDs(ids...)
	return vu
}

// RemoveCarts removes "carts" edges to Cart entities.
func (vu *VisitorUpdate) RemoveCarts(c ...*Cart) *VisitorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveCartIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VisitorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VisitorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VisitorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VisitorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VisitorUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := visitor.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

func (vu *VisitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitor.Table,
			Columns: visitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(visitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(visitor.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(visitor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(visitor.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Sex(); ok {
		_spec.SetField(visitor.FieldSex, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedSex(); ok {
		_spec.AddField(visitor.FieldSex, field.TypeInt, value)
	}
	if vu.mutation.ManagedAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedManagedAccountsIDs(); len(nodes) > 0 && !vu.mutation.ManagedAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ManagedAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedCartsIDs(); len(nodes) > 0 && !vu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VisitorUpdateOne is the builder for updating a single Visitor entity.
type VisitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VisitorUpdateOne) SetUpdatedAt(t time.Time) *VisitorUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VisitorUpdateOne) SetDeletedAt(t time.Time) *VisitorUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VisitorUpdateOne) SetNillableDeletedAt(t *time.Time) *VisitorUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VisitorUpdateOne) ClearDeletedAt() *VisitorUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetName sets the "name" field.
func (vuo *VisitorUpdateOne) SetName(s string) *VisitorUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VisitorUpdateOne) SetNillableName(s *string) *VisitorUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetSex sets the "sex" field.
func (vuo *VisitorUpdateOne) SetSex(i int) *VisitorUpdateOne {
	vuo.mutation.ResetSex()
	vuo.mutation.SetSex(i)
	return vuo
}

// AddSex adds i to the "sex" field.
func (vuo *VisitorUpdateOne) AddSex(i int) *VisitorUpdateOne {
	vuo.mutation.AddSex(i)
	return vuo
}

// AddManagedAccountIDs adds the "managed_accounts" edge to the Account entity by IDs.
func (vuo *VisitorUpdateOne) AddManagedAccountIDs(ids ...int) *VisitorUpdateOne {
	vuo.mutation.AddManagedAccountIDs(ids...)
	return vuo
}

// AddManagedAccounts adds the "managed_accounts" edges to the Account entity.
func (vuo *VisitorUpdateOne) AddManagedAccounts(a ...*Account) *VisitorUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.AddManagedAccountIDs(ids...)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (vuo *VisitorUpdateOne) AddCartIDs(ids ...int) *VisitorUpdateOne {
	vuo.mutation.AddCartIDs(ids...)
	return vuo
}

// AddCarts adds the "carts" edges to the Cart entity.
func (vuo *VisitorUpdateOne) AddCarts(c ...*Cart) *VisitorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddCartIDs(ids...)
}

// Mutation returns the VisitorMutation object of the builder.
func (vuo *VisitorUpdateOne) Mutation() *VisitorMutation {
	return vuo.mutation
}

// ClearManagedAccounts clears all "managed_accounts" edges to the Account entity.
func (vuo *VisitorUpdateOne) ClearManagedAccounts() *VisitorUpdateOne {
	vuo.mutation.ClearManagedAccounts()
	return vuo
}

// RemoveManagedAccountIDs removes the "managed_accounts" edge to Account entities by IDs.
func (vuo *VisitorUpdateOne) RemoveManagedAccountIDs(ids ...int) *VisitorUpdateOne {
	vuo.mutation.RemoveManagedAccountIDs(ids...)
	return vuo
}

// RemoveManagedAccounts removes "managed_accounts" edges to Account entities.
func (vuo *VisitorUpdateOne) RemoveManagedAccounts(a ...*Account) *VisitorUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.RemoveManagedAccountIDs(ids...)
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (vuo *VisitorUpdateOne) ClearCarts() *VisitorUpdateOne {
	vuo.mutation.ClearCarts()
	return vuo
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (vuo *VisitorUpdateOne) RemoveCartIDs(ids ...int) *VisitorUpdateOne {
	vuo.mutation.RemoveCartIDs(ids...)
	return vuo
}

// RemoveCarts removes "carts" edges to Cart entities.
func (vuo *VisitorUpdateOne) RemoveCarts(c ...*Cart) *VisitorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveCartIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VisitorUpdateOne) Select(field string, fields ...string) *VisitorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Visitor entity.
func (vuo *VisitorUpdateOne) Save(ctx context.Context) (*Visitor, error) {
	var (
		err  error
		node *Visitor
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Visitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VisitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VisitorUpdateOne) SaveX(ctx context.Context) *Visitor {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VisitorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VisitorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VisitorUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := visitor.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

func (vuo *VisitorUpdateOne) sqlSave(ctx context.Context) (_node *Visitor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitor.Table,
			Columns: visitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Visitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitor.FieldID)
		for _, f := range fields {
			if !visitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(visitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(visitor.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(visitor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(visitor.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Sex(); ok {
		_spec.SetField(visitor.FieldSex, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedSex(); ok {
		_spec.AddField(visitor.FieldSex, field.TypeInt, value)
	}
	if vuo.mutation.ManagedAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedManagedAccountsIDs(); len(nodes) > 0 && !vuo.mutation.ManagedAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ManagedAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedCartsIDs(); len(nodes) > 0 && !vuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Visitor{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
