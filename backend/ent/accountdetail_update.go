// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/account"
	"selfregi/ent/accountdetail"
	"selfregi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// AccountDetailUpdate is the builder for updating AccountDetail entities.
type AccountDetailUpdate struct {
	config
	hooks    []Hook
	mutation *AccountDetailMutation
}

// Where appends a list predicates to the AccountDetailUpdate builder.
func (adu *AccountDetailUpdate) Where(ps ...predicate.AccountDetail) *AccountDetailUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetUpdatedAt sets the "updated_at" field.
func (adu *AccountDetailUpdate) SetUpdatedAt(t time.Time) *AccountDetailUpdate {
	adu.mutation.SetUpdatedAt(t)
	return adu
}

// SetDeletedAt sets the "deleted_at" field.
func (adu *AccountDetailUpdate) SetDeletedAt(t time.Time) *AccountDetailUpdate {
	adu.mutation.SetDeletedAt(t)
	return adu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableDeletedAt(t *time.Time) *AccountDetailUpdate {
	if t != nil {
		adu.SetDeletedAt(*t)
	}
	return adu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (adu *AccountDetailUpdate) ClearDeletedAt() *AccountDetailUpdate {
	adu.mutation.ClearDeletedAt()
	return adu
}

// SetAccountID sets the "account_id" field.
func (adu *AccountDetailUpdate) SetAccountID(i int) *AccountDetailUpdate {
	adu.mutation.ResetAccountID()
	adu.mutation.SetAccountID(i)
	return adu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableAccountID(i *int) *AccountDetailUpdate {
	if i != nil {
		adu.SetAccountID(*i)
	}
	return adu
}

// AddAccountID adds i to the "account_id" field.
func (adu *AccountDetailUpdate) AddAccountID(i int) *AccountDetailUpdate {
	adu.mutation.AddAccountID(i)
	return adu
}

// ClearAccountID clears the value of the "account_id" field.
func (adu *AccountDetailUpdate) ClearAccountID() *AccountDetailUpdate {
	adu.mutation.ClearAccountID()
	return adu
}

// SetVisitorID sets the "visitor_id" field.
func (adu *AccountDetailUpdate) SetVisitorID(i int) *AccountDetailUpdate {
	adu.mutation.ResetVisitorID()
	adu.mutation.SetVisitorID(i)
	return adu
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableVisitorID(i *int) *AccountDetailUpdate {
	if i != nil {
		adu.SetVisitorID(*i)
	}
	return adu
}

// AddVisitorID adds i to the "visitor_id" field.
func (adu *AccountDetailUpdate) AddVisitorID(i int) *AccountDetailUpdate {
	adu.mutation.AddVisitorID(i)
	return adu
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (adu *AccountDetailUpdate) ClearVisitorID() *AccountDetailUpdate {
	adu.mutation.ClearVisitorID()
	return adu
}

// SetProductID sets the "product_id" field.
func (adu *AccountDetailUpdate) SetProductID(i int) *AccountDetailUpdate {
	adu.mutation.ResetProductID()
	adu.mutation.SetProductID(i)
	return adu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableProductID(i *int) *AccountDetailUpdate {
	if i != nil {
		adu.SetProductID(*i)
	}
	return adu
}

// AddProductID adds i to the "product_id" field.
func (adu *AccountDetailUpdate) AddProductID(i int) *AccountDetailUpdate {
	adu.mutation.AddProductID(i)
	return adu
}

// ClearProductID clears the value of the "product_id" field.
func (adu *AccountDetailUpdate) ClearProductID() *AccountDetailUpdate {
	adu.mutation.ClearProductID()
	return adu
}

// SetCategoryID sets the "category_id" field.
func (adu *AccountDetailUpdate) SetCategoryID(i int) *AccountDetailUpdate {
	adu.mutation.ResetCategoryID()
	adu.mutation.SetCategoryID(i)
	return adu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableCategoryID(i *int) *AccountDetailUpdate {
	if i != nil {
		adu.SetCategoryID(*i)
	}
	return adu
}

// AddCategoryID adds i to the "category_id" field.
func (adu *AccountDetailUpdate) AddCategoryID(i int) *AccountDetailUpdate {
	adu.mutation.AddCategoryID(i)
	return adu
}

// ClearCategoryID clears the value of the "category_id" field.
func (adu *AccountDetailUpdate) ClearCategoryID() *AccountDetailUpdate {
	adu.mutation.ClearCategoryID()
	return adu
}

// SetData sets the "data" field.
func (adu *AccountDetailUpdate) SetData(s []string) *AccountDetailUpdate {
	adu.mutation.SetData(s)
	return adu
}

// AppendData appends s to the "data" field.
func (adu *AccountDetailUpdate) AppendData(s []string) *AccountDetailUpdate {
	adu.mutation.AppendData(s)
	return adu
}

// ClearData clears the value of the "data" field.
func (adu *AccountDetailUpdate) ClearData() *AccountDetailUpdate {
	adu.mutation.ClearData()
	return adu
}

// SetOptions sets the "options" field.
func (adu *AccountDetailUpdate) SetOptions(s []string) *AccountDetailUpdate {
	adu.mutation.SetOptions(s)
	return adu
}

// AppendOptions appends s to the "options" field.
func (adu *AccountDetailUpdate) AppendOptions(s []string) *AccountDetailUpdate {
	adu.mutation.AppendOptions(s)
	return adu
}

// ClearOptions clears the value of the "options" field.
func (adu *AccountDetailUpdate) ClearOptions() *AccountDetailUpdate {
	adu.mutation.ClearOptions()
	return adu
}

// SetQuantity sets the "quantity" field.
func (adu *AccountDetailUpdate) SetQuantity(i int) *AccountDetailUpdate {
	adu.mutation.ResetQuantity()
	adu.mutation.SetQuantity(i)
	return adu
}

// AddQuantity adds i to the "quantity" field.
func (adu *AccountDetailUpdate) AddQuantity(i int) *AccountDetailUpdate {
	adu.mutation.AddQuantity(i)
	return adu
}

// SetPrice sets the "price" field.
func (adu *AccountDetailUpdate) SetPrice(i int) *AccountDetailUpdate {
	adu.mutation.ResetPrice()
	adu.mutation.SetPrice(i)
	return adu
}

// AddPrice adds i to the "price" field.
func (adu *AccountDetailUpdate) AddPrice(i int) *AccountDetailUpdate {
	adu.mutation.AddPrice(i)
	return adu
}

// SetTax sets the "tax" field.
func (adu *AccountDetailUpdate) SetTax(i int) *AccountDetailUpdate {
	adu.mutation.ResetTax()
	adu.mutation.SetTax(i)
	return adu
}

// AddTax adds i to the "tax" field.
func (adu *AccountDetailUpdate) AddTax(i int) *AccountDetailUpdate {
	adu.mutation.AddTax(i)
	return adu
}

// SetTaxRate sets the "tax_rate" field.
func (adu *AccountDetailUpdate) SetTaxRate(i int) *AccountDetailUpdate {
	adu.mutation.ResetTaxRate()
	adu.mutation.SetTaxRate(i)
	return adu
}

// AddTaxRate adds i to the "tax_rate" field.
func (adu *AccountDetailUpdate) AddTaxRate(i int) *AccountDetailUpdate {
	adu.mutation.AddTaxRate(i)
	return adu
}

// SetDiscountID sets the "discount_id" field.
func (adu *AccountDetailUpdate) SetDiscountID(i int) *AccountDetailUpdate {
	adu.mutation.ResetDiscountID()
	adu.mutation.SetDiscountID(i)
	return adu
}

// SetNillableDiscountID sets the "discount_id" field if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableDiscountID(i *int) *AccountDetailUpdate {
	if i != nil {
		adu.SetDiscountID(*i)
	}
	return adu
}

// AddDiscountID adds i to the "discount_id" field.
func (adu *AccountDetailUpdate) AddDiscountID(i int) *AccountDetailUpdate {
	adu.mutation.AddDiscountID(i)
	return adu
}

// ClearDiscountID clears the value of the "discount_id" field.
func (adu *AccountDetailUpdate) ClearDiscountID() *AccountDetailUpdate {
	adu.mutation.ClearDiscountID()
	return adu
}

// SetDiscountName sets the "discount_name" field.
func (adu *AccountDetailUpdate) SetDiscountName(s string) *AccountDetailUpdate {
	adu.mutation.SetDiscountName(s)
	return adu
}

// SetDiscountClass sets the "discount_class" field.
func (adu *AccountDetailUpdate) SetDiscountClass(u uint) *AccountDetailUpdate {
	adu.mutation.ResetDiscountClass()
	adu.mutation.SetDiscountClass(u)
	return adu
}

// AddDiscountClass adds u to the "discount_class" field.
func (adu *AccountDetailUpdate) AddDiscountClass(u int) *AccountDetailUpdate {
	adu.mutation.AddDiscountClass(u)
	return adu
}

// SetDiscountRate sets the "discount_rate" field.
func (adu *AccountDetailUpdate) SetDiscountRate(d decimal.Decimal) *AccountDetailUpdate {
	adu.mutation.ResetDiscountRate()
	adu.mutation.SetDiscountRate(d)
	return adu
}

// AddDiscountRate adds d to the "discount_rate" field.
func (adu *AccountDetailUpdate) AddDiscountRate(d decimal.Decimal) *AccountDetailUpdate {
	adu.mutation.AddDiscountRate(d)
	return adu
}

// SetDiscountPrice sets the "discount_price" field.
func (adu *AccountDetailUpdate) SetDiscountPrice(i int) *AccountDetailUpdate {
	adu.mutation.ResetDiscountPrice()
	adu.mutation.SetDiscountPrice(i)
	return adu
}

// AddDiscountPrice adds i to the "discount_price" field.
func (adu *AccountDetailUpdate) AddDiscountPrice(i int) *AccountDetailUpdate {
	adu.mutation.AddDiscountPrice(i)
	return adu
}

// SetManagedAccountID sets the "managed_account" edge to the Account entity by ID.
func (adu *AccountDetailUpdate) SetManagedAccountID(id int) *AccountDetailUpdate {
	adu.mutation.SetManagedAccountID(id)
	return adu
}

// SetNillableManagedAccountID sets the "managed_account" edge to the Account entity by ID if the given value is not nil.
func (adu *AccountDetailUpdate) SetNillableManagedAccountID(id *int) *AccountDetailUpdate {
	if id != nil {
		adu = adu.SetManagedAccountID(*id)
	}
	return adu
}

// SetManagedAccount sets the "managed_account" edge to the Account entity.
func (adu *AccountDetailUpdate) SetManagedAccount(a *Account) *AccountDetailUpdate {
	return adu.SetManagedAccountID(a.ID)
}

// Mutation returns the AccountDetailMutation object of the builder.
func (adu *AccountDetailUpdate) Mutation() *AccountDetailMutation {
	return adu.mutation
}

// ClearManagedAccount clears the "managed_account" edge to the Account entity.
func (adu *AccountDetailUpdate) ClearManagedAccount() *AccountDetailUpdate {
	adu.mutation.ClearManagedAccount()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AccountDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	adu.defaults()
	if len(adu.hooks) == 0 {
		if err = adu.check(); err != nil {
			return 0, err
		}
		affected, err = adu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = adu.check(); err != nil {
				return 0, err
			}
			adu.mutation = mutation
			affected, err = adu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adu.hooks) - 1; i >= 0; i-- {
			if adu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = adu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AccountDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AccountDetailUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AccountDetailUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *AccountDetailUpdate) defaults() {
	if _, ok := adu.mutation.UpdatedAt(); !ok {
		v := accountdetail.UpdateDefaultUpdatedAt()
		adu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *AccountDetailUpdate) check() error {
	if v, ok := adu.mutation.AccountID(); ok {
		if err := accountdetail.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.account_id": %w`, err)}
		}
	}
	if v, ok := adu.mutation.VisitorID(); ok {
		if err := accountdetail.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.visitor_id": %w`, err)}
		}
	}
	if v, ok := adu.mutation.ProductID(); ok {
		if err := accountdetail.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.product_id": %w`, err)}
		}
	}
	if v, ok := adu.mutation.CategoryID(); ok {
		if err := accountdetail.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.category_id": %w`, err)}
		}
	}
	if v, ok := adu.mutation.Quantity(); ok {
		if err := accountdetail.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.quantity": %w`, err)}
		}
	}
	if v, ok := adu.mutation.DiscountID(); ok {
		if err := accountdetail.DiscountIDValidator(v); err != nil {
			return &ValidationError{Name: "discount_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.discount_id": %w`, err)}
		}
	}
	return nil
}

func (adu *AccountDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountdetail.Table,
			Columns: accountdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountdetail.FieldID,
			},
		},
	}
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.UpdatedAt(); ok {
		_spec.SetField(accountdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := adu.mutation.DeletedAt(); ok {
		_spec.SetField(accountdetail.FieldDeletedAt, field.TypeTime, value)
	}
	if adu.mutation.DeletedAtCleared() {
		_spec.ClearField(accountdetail.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := adu.mutation.AccountID(); ok {
		_spec.SetField(accountdetail.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedAccountID(); ok {
		_spec.AddField(accountdetail.FieldAccountID, field.TypeInt, value)
	}
	if adu.mutation.AccountIDCleared() {
		_spec.ClearField(accountdetail.FieldAccountID, field.TypeInt)
	}
	if value, ok := adu.mutation.VisitorID(); ok {
		_spec.SetField(accountdetail.FieldVisitorID, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedVisitorID(); ok {
		_spec.AddField(accountdetail.FieldVisitorID, field.TypeInt, value)
	}
	if adu.mutation.VisitorIDCleared() {
		_spec.ClearField(accountdetail.FieldVisitorID, field.TypeInt)
	}
	if value, ok := adu.mutation.ProductID(); ok {
		_spec.SetField(accountdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedProductID(); ok {
		_spec.AddField(accountdetail.FieldProductID, field.TypeInt, value)
	}
	if adu.mutation.ProductIDCleared() {
		_spec.ClearField(accountdetail.FieldProductID, field.TypeInt)
	}
	if value, ok := adu.mutation.CategoryID(); ok {
		_spec.SetField(accountdetail.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedCategoryID(); ok {
		_spec.AddField(accountdetail.FieldCategoryID, field.TypeInt, value)
	}
	if adu.mutation.CategoryIDCleared() {
		_spec.ClearField(accountdetail.FieldCategoryID, field.TypeInt)
	}
	if value, ok := adu.mutation.Data(); ok {
		_spec.SetField(accountdetail.FieldData, field.TypeJSON, value)
	}
	if value, ok := adu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountdetail.FieldData, value)
		})
	}
	if adu.mutation.DataCleared() {
		_spec.ClearField(accountdetail.FieldData, field.TypeJSON)
	}
	if value, ok := adu.mutation.Options(); ok {
		_spec.SetField(accountdetail.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := adu.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountdetail.FieldOptions, value)
		})
	}
	if adu.mutation.OptionsCleared() {
		_spec.ClearField(accountdetail.FieldOptions, field.TypeJSON)
	}
	if value, ok := adu.mutation.Quantity(); ok {
		_spec.SetField(accountdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedQuantity(); ok {
		_spec.AddField(accountdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := adu.mutation.Price(); ok {
		_spec.SetField(accountdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedPrice(); ok {
		_spec.AddField(accountdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := adu.mutation.Tax(); ok {
		_spec.SetField(accountdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedTax(); ok {
		_spec.AddField(accountdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := adu.mutation.TaxRate(); ok {
		_spec.SetField(accountdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedTaxRate(); ok {
		_spec.AddField(accountdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := adu.mutation.DiscountID(); ok {
		_spec.SetField(accountdetail.FieldDiscountID, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedDiscountID(); ok {
		_spec.AddField(accountdetail.FieldDiscountID, field.TypeInt, value)
	}
	if adu.mutation.DiscountIDCleared() {
		_spec.ClearField(accountdetail.FieldDiscountID, field.TypeInt)
	}
	if value, ok := adu.mutation.DiscountName(); ok {
		_spec.SetField(accountdetail.FieldDiscountName, field.TypeString, value)
	}
	if value, ok := adu.mutation.DiscountClass(); ok {
		_spec.SetField(accountdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := adu.mutation.AddedDiscountClass(); ok {
		_spec.AddField(accountdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := adu.mutation.DiscountRate(); ok {
		_spec.SetField(accountdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := adu.mutation.AddedDiscountRate(); ok {
		_spec.AddField(accountdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := adu.mutation.DiscountPrice(); ok {
		_spec.SetField(accountdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if value, ok := adu.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(accountdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if adu.mutation.ManagedAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetail.ManagedAccountTable,
			Columns: []string{accountdetail.ManagedAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.ManagedAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetail.ManagedAccountTable,
			Columns: []string{accountdetail.ManagedAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AccountDetailUpdateOne is the builder for updating a single AccountDetail entity.
type AccountDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountDetailMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aduo *AccountDetailUpdateOne) SetUpdatedAt(t time.Time) *AccountDetailUpdateOne {
	aduo.mutation.SetUpdatedAt(t)
	return aduo
}

// SetDeletedAt sets the "deleted_at" field.
func (aduo *AccountDetailUpdateOne) SetDeletedAt(t time.Time) *AccountDetailUpdateOne {
	aduo.mutation.SetDeletedAt(t)
	return aduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableDeletedAt(t *time.Time) *AccountDetailUpdateOne {
	if t != nil {
		aduo.SetDeletedAt(*t)
	}
	return aduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aduo *AccountDetailUpdateOne) ClearDeletedAt() *AccountDetailUpdateOne {
	aduo.mutation.ClearDeletedAt()
	return aduo
}

// SetAccountID sets the "account_id" field.
func (aduo *AccountDetailUpdateOne) SetAccountID(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetAccountID()
	aduo.mutation.SetAccountID(i)
	return aduo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableAccountID(i *int) *AccountDetailUpdateOne {
	if i != nil {
		aduo.SetAccountID(*i)
	}
	return aduo
}

// AddAccountID adds i to the "account_id" field.
func (aduo *AccountDetailUpdateOne) AddAccountID(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddAccountID(i)
	return aduo
}

// ClearAccountID clears the value of the "account_id" field.
func (aduo *AccountDetailUpdateOne) ClearAccountID() *AccountDetailUpdateOne {
	aduo.mutation.ClearAccountID()
	return aduo
}

// SetVisitorID sets the "visitor_id" field.
func (aduo *AccountDetailUpdateOne) SetVisitorID(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetVisitorID()
	aduo.mutation.SetVisitorID(i)
	return aduo
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableVisitorID(i *int) *AccountDetailUpdateOne {
	if i != nil {
		aduo.SetVisitorID(*i)
	}
	return aduo
}

// AddVisitorID adds i to the "visitor_id" field.
func (aduo *AccountDetailUpdateOne) AddVisitorID(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddVisitorID(i)
	return aduo
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (aduo *AccountDetailUpdateOne) ClearVisitorID() *AccountDetailUpdateOne {
	aduo.mutation.ClearVisitorID()
	return aduo
}

// SetProductID sets the "product_id" field.
func (aduo *AccountDetailUpdateOne) SetProductID(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetProductID()
	aduo.mutation.SetProductID(i)
	return aduo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableProductID(i *int) *AccountDetailUpdateOne {
	if i != nil {
		aduo.SetProductID(*i)
	}
	return aduo
}

// AddProductID adds i to the "product_id" field.
func (aduo *AccountDetailUpdateOne) AddProductID(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddProductID(i)
	return aduo
}

// ClearProductID clears the value of the "product_id" field.
func (aduo *AccountDetailUpdateOne) ClearProductID() *AccountDetailUpdateOne {
	aduo.mutation.ClearProductID()
	return aduo
}

// SetCategoryID sets the "category_id" field.
func (aduo *AccountDetailUpdateOne) SetCategoryID(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetCategoryID()
	aduo.mutation.SetCategoryID(i)
	return aduo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableCategoryID(i *int) *AccountDetailUpdateOne {
	if i != nil {
		aduo.SetCategoryID(*i)
	}
	return aduo
}

// AddCategoryID adds i to the "category_id" field.
func (aduo *AccountDetailUpdateOne) AddCategoryID(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddCategoryID(i)
	return aduo
}

// ClearCategoryID clears the value of the "category_id" field.
func (aduo *AccountDetailUpdateOne) ClearCategoryID() *AccountDetailUpdateOne {
	aduo.mutation.ClearCategoryID()
	return aduo
}

// SetData sets the "data" field.
func (aduo *AccountDetailUpdateOne) SetData(s []string) *AccountDetailUpdateOne {
	aduo.mutation.SetData(s)
	return aduo
}

// AppendData appends s to the "data" field.
func (aduo *AccountDetailUpdateOne) AppendData(s []string) *AccountDetailUpdateOne {
	aduo.mutation.AppendData(s)
	return aduo
}

// ClearData clears the value of the "data" field.
func (aduo *AccountDetailUpdateOne) ClearData() *AccountDetailUpdateOne {
	aduo.mutation.ClearData()
	return aduo
}

// SetOptions sets the "options" field.
func (aduo *AccountDetailUpdateOne) SetOptions(s []string) *AccountDetailUpdateOne {
	aduo.mutation.SetOptions(s)
	return aduo
}

// AppendOptions appends s to the "options" field.
func (aduo *AccountDetailUpdateOne) AppendOptions(s []string) *AccountDetailUpdateOne {
	aduo.mutation.AppendOptions(s)
	return aduo
}

// ClearOptions clears the value of the "options" field.
func (aduo *AccountDetailUpdateOne) ClearOptions() *AccountDetailUpdateOne {
	aduo.mutation.ClearOptions()
	return aduo
}

// SetQuantity sets the "quantity" field.
func (aduo *AccountDetailUpdateOne) SetQuantity(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetQuantity()
	aduo.mutation.SetQuantity(i)
	return aduo
}

// AddQuantity adds i to the "quantity" field.
func (aduo *AccountDetailUpdateOne) AddQuantity(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddQuantity(i)
	return aduo
}

// SetPrice sets the "price" field.
func (aduo *AccountDetailUpdateOne) SetPrice(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetPrice()
	aduo.mutation.SetPrice(i)
	return aduo
}

// AddPrice adds i to the "price" field.
func (aduo *AccountDetailUpdateOne) AddPrice(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddPrice(i)
	return aduo
}

// SetTax sets the "tax" field.
func (aduo *AccountDetailUpdateOne) SetTax(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetTax()
	aduo.mutation.SetTax(i)
	return aduo
}

// AddTax adds i to the "tax" field.
func (aduo *AccountDetailUpdateOne) AddTax(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddTax(i)
	return aduo
}

// SetTaxRate sets the "tax_rate" field.
func (aduo *AccountDetailUpdateOne) SetTaxRate(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetTaxRate()
	aduo.mutation.SetTaxRate(i)
	return aduo
}

// AddTaxRate adds i to the "tax_rate" field.
func (aduo *AccountDetailUpdateOne) AddTaxRate(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddTaxRate(i)
	return aduo
}

// SetDiscountID sets the "discount_id" field.
func (aduo *AccountDetailUpdateOne) SetDiscountID(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetDiscountID()
	aduo.mutation.SetDiscountID(i)
	return aduo
}

// SetNillableDiscountID sets the "discount_id" field if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableDiscountID(i *int) *AccountDetailUpdateOne {
	if i != nil {
		aduo.SetDiscountID(*i)
	}
	return aduo
}

// AddDiscountID adds i to the "discount_id" field.
func (aduo *AccountDetailUpdateOne) AddDiscountID(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddDiscountID(i)
	return aduo
}

// ClearDiscountID clears the value of the "discount_id" field.
func (aduo *AccountDetailUpdateOne) ClearDiscountID() *AccountDetailUpdateOne {
	aduo.mutation.ClearDiscountID()
	return aduo
}

// SetDiscountName sets the "discount_name" field.
func (aduo *AccountDetailUpdateOne) SetDiscountName(s string) *AccountDetailUpdateOne {
	aduo.mutation.SetDiscountName(s)
	return aduo
}

// SetDiscountClass sets the "discount_class" field.
func (aduo *AccountDetailUpdateOne) SetDiscountClass(u uint) *AccountDetailUpdateOne {
	aduo.mutation.ResetDiscountClass()
	aduo.mutation.SetDiscountClass(u)
	return aduo
}

// AddDiscountClass adds u to the "discount_class" field.
func (aduo *AccountDetailUpdateOne) AddDiscountClass(u int) *AccountDetailUpdateOne {
	aduo.mutation.AddDiscountClass(u)
	return aduo
}

// SetDiscountRate sets the "discount_rate" field.
func (aduo *AccountDetailUpdateOne) SetDiscountRate(d decimal.Decimal) *AccountDetailUpdateOne {
	aduo.mutation.ResetDiscountRate()
	aduo.mutation.SetDiscountRate(d)
	return aduo
}

// AddDiscountRate adds d to the "discount_rate" field.
func (aduo *AccountDetailUpdateOne) AddDiscountRate(d decimal.Decimal) *AccountDetailUpdateOne {
	aduo.mutation.AddDiscountRate(d)
	return aduo
}

// SetDiscountPrice sets the "discount_price" field.
func (aduo *AccountDetailUpdateOne) SetDiscountPrice(i int) *AccountDetailUpdateOne {
	aduo.mutation.ResetDiscountPrice()
	aduo.mutation.SetDiscountPrice(i)
	return aduo
}

// AddDiscountPrice adds i to the "discount_price" field.
func (aduo *AccountDetailUpdateOne) AddDiscountPrice(i int) *AccountDetailUpdateOne {
	aduo.mutation.AddDiscountPrice(i)
	return aduo
}

// SetManagedAccountID sets the "managed_account" edge to the Account entity by ID.
func (aduo *AccountDetailUpdateOne) SetManagedAccountID(id int) *AccountDetailUpdateOne {
	aduo.mutation.SetManagedAccountID(id)
	return aduo
}

// SetNillableManagedAccountID sets the "managed_account" edge to the Account entity by ID if the given value is not nil.
func (aduo *AccountDetailUpdateOne) SetNillableManagedAccountID(id *int) *AccountDetailUpdateOne {
	if id != nil {
		aduo = aduo.SetManagedAccountID(*id)
	}
	return aduo
}

// SetManagedAccount sets the "managed_account" edge to the Account entity.
func (aduo *AccountDetailUpdateOne) SetManagedAccount(a *Account) *AccountDetailUpdateOne {
	return aduo.SetManagedAccountID(a.ID)
}

// Mutation returns the AccountDetailMutation object of the builder.
func (aduo *AccountDetailUpdateOne) Mutation() *AccountDetailMutation {
	return aduo.mutation
}

// ClearManagedAccount clears the "managed_account" edge to the Account entity.
func (aduo *AccountDetailUpdateOne) ClearManagedAccount() *AccountDetailUpdateOne {
	aduo.mutation.ClearManagedAccount()
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AccountDetailUpdateOne) Select(field string, fields ...string) *AccountDetailUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AccountDetail entity.
func (aduo *AccountDetailUpdateOne) Save(ctx context.Context) (*AccountDetail, error) {
	var (
		err  error
		node *AccountDetail
	)
	aduo.defaults()
	if len(aduo.hooks) == 0 {
		if err = aduo.check(); err != nil {
			return nil, err
		}
		node, err = aduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aduo.check(); err != nil {
				return nil, err
			}
			aduo.mutation = mutation
			node, err = aduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aduo.hooks) - 1; i >= 0; i-- {
			if aduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccountDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AccountDetailUpdateOne) SaveX(ctx context.Context) *AccountDetail {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AccountDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AccountDetailUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *AccountDetailUpdateOne) defaults() {
	if _, ok := aduo.mutation.UpdatedAt(); !ok {
		v := accountdetail.UpdateDefaultUpdatedAt()
		aduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *AccountDetailUpdateOne) check() error {
	if v, ok := aduo.mutation.AccountID(); ok {
		if err := accountdetail.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.account_id": %w`, err)}
		}
	}
	if v, ok := aduo.mutation.VisitorID(); ok {
		if err := accountdetail.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.visitor_id": %w`, err)}
		}
	}
	if v, ok := aduo.mutation.ProductID(); ok {
		if err := accountdetail.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.product_id": %w`, err)}
		}
	}
	if v, ok := aduo.mutation.CategoryID(); ok {
		if err := accountdetail.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.category_id": %w`, err)}
		}
	}
	if v, ok := aduo.mutation.Quantity(); ok {
		if err := accountdetail.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.quantity": %w`, err)}
		}
	}
	if v, ok := aduo.mutation.DiscountID(); ok {
		if err := accountdetail.DiscountIDValidator(v); err != nil {
			return &ValidationError{Name: "discount_id", err: fmt.Errorf(`ent: validator failed for field "AccountDetail.discount_id": %w`, err)}
		}
	}
	return nil
}

func (aduo *AccountDetailUpdateOne) sqlSave(ctx context.Context) (_node *AccountDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountdetail.Table,
			Columns: accountdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountdetail.FieldID,
			},
		},
	}
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountdetail.FieldID)
		for _, f := range fields {
			if !accountdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.UpdatedAt(); ok {
		_spec.SetField(accountdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aduo.mutation.DeletedAt(); ok {
		_spec.SetField(accountdetail.FieldDeletedAt, field.TypeTime, value)
	}
	if aduo.mutation.DeletedAtCleared() {
		_spec.ClearField(accountdetail.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aduo.mutation.AccountID(); ok {
		_spec.SetField(accountdetail.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedAccountID(); ok {
		_spec.AddField(accountdetail.FieldAccountID, field.TypeInt, value)
	}
	if aduo.mutation.AccountIDCleared() {
		_spec.ClearField(accountdetail.FieldAccountID, field.TypeInt)
	}
	if value, ok := aduo.mutation.VisitorID(); ok {
		_spec.SetField(accountdetail.FieldVisitorID, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedVisitorID(); ok {
		_spec.AddField(accountdetail.FieldVisitorID, field.TypeInt, value)
	}
	if aduo.mutation.VisitorIDCleared() {
		_spec.ClearField(accountdetail.FieldVisitorID, field.TypeInt)
	}
	if value, ok := aduo.mutation.ProductID(); ok {
		_spec.SetField(accountdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedProductID(); ok {
		_spec.AddField(accountdetail.FieldProductID, field.TypeInt, value)
	}
	if aduo.mutation.ProductIDCleared() {
		_spec.ClearField(accountdetail.FieldProductID, field.TypeInt)
	}
	if value, ok := aduo.mutation.CategoryID(); ok {
		_spec.SetField(accountdetail.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedCategoryID(); ok {
		_spec.AddField(accountdetail.FieldCategoryID, field.TypeInt, value)
	}
	if aduo.mutation.CategoryIDCleared() {
		_spec.ClearField(accountdetail.FieldCategoryID, field.TypeInt)
	}
	if value, ok := aduo.mutation.Data(); ok {
		_spec.SetField(accountdetail.FieldData, field.TypeJSON, value)
	}
	if value, ok := aduo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountdetail.FieldData, value)
		})
	}
	if aduo.mutation.DataCleared() {
		_spec.ClearField(accountdetail.FieldData, field.TypeJSON)
	}
	if value, ok := aduo.mutation.Options(); ok {
		_spec.SetField(accountdetail.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := aduo.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountdetail.FieldOptions, value)
		})
	}
	if aduo.mutation.OptionsCleared() {
		_spec.ClearField(accountdetail.FieldOptions, field.TypeJSON)
	}
	if value, ok := aduo.mutation.Quantity(); ok {
		_spec.SetField(accountdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedQuantity(); ok {
		_spec.AddField(accountdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.Price(); ok {
		_spec.SetField(accountdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedPrice(); ok {
		_spec.AddField(accountdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.Tax(); ok {
		_spec.SetField(accountdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedTax(); ok {
		_spec.AddField(accountdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.TaxRate(); ok {
		_spec.SetField(accountdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedTaxRate(); ok {
		_spec.AddField(accountdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.DiscountID(); ok {
		_spec.SetField(accountdetail.FieldDiscountID, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedDiscountID(); ok {
		_spec.AddField(accountdetail.FieldDiscountID, field.TypeInt, value)
	}
	if aduo.mutation.DiscountIDCleared() {
		_spec.ClearField(accountdetail.FieldDiscountID, field.TypeInt)
	}
	if value, ok := aduo.mutation.DiscountName(); ok {
		_spec.SetField(accountdetail.FieldDiscountName, field.TypeString, value)
	}
	if value, ok := aduo.mutation.DiscountClass(); ok {
		_spec.SetField(accountdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := aduo.mutation.AddedDiscountClass(); ok {
		_spec.AddField(accountdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := aduo.mutation.DiscountRate(); ok {
		_spec.SetField(accountdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := aduo.mutation.AddedDiscountRate(); ok {
		_spec.AddField(accountdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := aduo.mutation.DiscountPrice(); ok {
		_spec.SetField(accountdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if value, ok := aduo.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(accountdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if aduo.mutation.ManagedAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetail.ManagedAccountTable,
			Columns: []string{accountdetail.ManagedAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.ManagedAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountdetail.ManagedAccountTable,
			Columns: []string{accountdetail.ManagedAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountDetail{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
