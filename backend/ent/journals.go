// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"selfregi/ent/journals"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Journals is the model entity for the Journals schema.
type Journals struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Journals) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case journals.FieldID:
			values[i] = new(sql.NullInt64)
		case journals.FieldCreatedAt, journals.FieldUpdatedAt, journals.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Journals", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Journals fields.
func (j *Journals) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case journals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case journals.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case journals.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				j.UpdatedAt = value.Time
			}
		case journals.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				j.DeletedAt = new(time.Time)
				*j.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Journals.
// Note that you need to call Journals.Unwrap() before calling this method if this Journals
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Journals) Update() *JournalsUpdateOne {
	return (&JournalsClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the Journals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Journals) Unwrap() *Journals {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Journals is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Journals) String() string {
	var builder strings.Builder
	builder.WriteString("Journals(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(j.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := j.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// JournalsSlice is a parsable slice of Journals.
type JournalsSlice []*Journals

func (j JournalsSlice) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
