// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"selfregi/ent/account"
	"selfregi/ent/cart"
	"selfregi/ent/predicate"
	"selfregi/ent/visitor"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorQuery is the builder for querying Visitor entities.
type VisitorQuery struct {
	config
	limit               *int
	offset              *int
	unique              *bool
	order               []OrderFunc
	fields              []string
	predicates          []predicate.Visitor
	withManagedAccounts *AccountQuery
	withCarts           *CartQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VisitorQuery builder.
func (vq *VisitorQuery) Where(ps ...predicate.Visitor) *VisitorQuery {
	vq.predicates = append(vq.predicates, ps...)
	return vq
}

// Limit adds a limit step to the query.
func (vq *VisitorQuery) Limit(limit int) *VisitorQuery {
	vq.limit = &limit
	return vq
}

// Offset adds an offset step to the query.
func (vq *VisitorQuery) Offset(offset int) *VisitorQuery {
	vq.offset = &offset
	return vq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vq *VisitorQuery) Unique(unique bool) *VisitorQuery {
	vq.unique = &unique
	return vq
}

// Order adds an order step to the query.
func (vq *VisitorQuery) Order(o ...OrderFunc) *VisitorQuery {
	vq.order = append(vq.order, o...)
	return vq
}

// QueryManagedAccounts chains the current query on the "managed_accounts" edge.
func (vq *VisitorQuery) QueryManagedAccounts() *AccountQuery {
	query := &AccountQuery{config: vq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(visitor.Table, visitor.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, visitor.ManagedAccountsTable, visitor.ManagedAccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarts chains the current query on the "carts" edge.
func (vq *VisitorQuery) QueryCarts() *CartQuery {
	query := &CartQuery{config: vq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(visitor.Table, visitor.FieldID, selector),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, visitor.CartsTable, visitor.CartsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Visitor entity from the query.
// Returns a *NotFoundError when no Visitor was found.
func (vq *VisitorQuery) First(ctx context.Context) (*Visitor, error) {
	nodes, err := vq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{visitor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vq *VisitorQuery) FirstX(ctx context.Context) *Visitor {
	node, err := vq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Visitor ID from the query.
// Returns a *NotFoundError when no Visitor ID was found.
func (vq *VisitorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{visitor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vq *VisitorQuery) FirstIDX(ctx context.Context) int {
	id, err := vq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Visitor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Visitor entity is found.
// Returns a *NotFoundError when no Visitor entities are found.
func (vq *VisitorQuery) Only(ctx context.Context) (*Visitor, error) {
	nodes, err := vq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{visitor.Label}
	default:
		return nil, &NotSingularError{visitor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vq *VisitorQuery) OnlyX(ctx context.Context) *Visitor {
	node, err := vq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Visitor ID in the query.
// Returns a *NotSingularError when more than one Visitor ID is found.
// Returns a *NotFoundError when no entities are found.
func (vq *VisitorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{visitor.Label}
	default:
		err = &NotSingularError{visitor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vq *VisitorQuery) OnlyIDX(ctx context.Context) int {
	id, err := vq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Visitors.
func (vq *VisitorQuery) All(ctx context.Context) ([]*Visitor, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return vq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vq *VisitorQuery) AllX(ctx context.Context) []*Visitor {
	nodes, err := vq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Visitor IDs.
func (vq *VisitorQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := vq.Select(visitor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vq *VisitorQuery) IDsX(ctx context.Context) []int {
	ids, err := vq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vq *VisitorQuery) Count(ctx context.Context) (int, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return vq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vq *VisitorQuery) CountX(ctx context.Context) int {
	count, err := vq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vq *VisitorQuery) Exist(ctx context.Context) (bool, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return vq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vq *VisitorQuery) ExistX(ctx context.Context) bool {
	exist, err := vq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VisitorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vq *VisitorQuery) Clone() *VisitorQuery {
	if vq == nil {
		return nil
	}
	return &VisitorQuery{
		config:              vq.config,
		limit:               vq.limit,
		offset:              vq.offset,
		order:               append([]OrderFunc{}, vq.order...),
		predicates:          append([]predicate.Visitor{}, vq.predicates...),
		withManagedAccounts: vq.withManagedAccounts.Clone(),
		withCarts:           vq.withCarts.Clone(),
		// clone intermediate query.
		sql:    vq.sql.Clone(),
		path:   vq.path,
		unique: vq.unique,
	}
}

// WithManagedAccounts tells the query-builder to eager-load the nodes that are connected to
// the "managed_accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VisitorQuery) WithManagedAccounts(opts ...func(*AccountQuery)) *VisitorQuery {
	query := &AccountQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withManagedAccounts = query
	return vq
}

// WithCarts tells the query-builder to eager-load the nodes that are connected to
// the "carts" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VisitorQuery) WithCarts(opts ...func(*CartQuery)) *VisitorQuery {
	query := &CartQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withCarts = query
	return vq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Visitor.Query().
//		GroupBy(visitor.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vq *VisitorQuery) GroupBy(field string, fields ...string) *VisitorGroupBy {
	grbuild := &VisitorGroupBy{config: vq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return vq.sqlQuery(ctx), nil
	}
	grbuild.label = visitor.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Visitor.Query().
//		Select(visitor.FieldCreatedAt).
//		Scan(ctx, &v)
func (vq *VisitorQuery) Select(fields ...string) *VisitorSelect {
	vq.fields = append(vq.fields, fields...)
	selbuild := &VisitorSelect{VisitorQuery: vq}
	selbuild.label = visitor.Label
	selbuild.flds, selbuild.scan = &vq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a VisitorSelect configured with the given aggregations.
func (vq *VisitorQuery) Aggregate(fns ...AggregateFunc) *VisitorSelect {
	return vq.Select().Aggregate(fns...)
}

func (vq *VisitorQuery) prepareQuery(ctx context.Context) error {
	for _, f := range vq.fields {
		if !visitor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vq.path != nil {
		prev, err := vq.path(ctx)
		if err != nil {
			return err
		}
		vq.sql = prev
	}
	return nil
}

func (vq *VisitorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Visitor, error) {
	var (
		nodes       = []*Visitor{}
		_spec       = vq.querySpec()
		loadedTypes = [2]bool{
			vq.withManagedAccounts != nil,
			vq.withCarts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Visitor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Visitor{config: vq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vq.withManagedAccounts; query != nil {
		if err := vq.loadManagedAccounts(ctx, query, nodes,
			func(n *Visitor) { n.Edges.ManagedAccounts = []*Account{} },
			func(n *Visitor, e *Account) { n.Edges.ManagedAccounts = append(n.Edges.ManagedAccounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withCarts; query != nil {
		if err := vq.loadCarts(ctx, query, nodes,
			func(n *Visitor) { n.Edges.Carts = []*Cart{} },
			func(n *Visitor, e *Cart) { n.Edges.Carts = append(n.Edges.Carts, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vq *VisitorQuery) loadManagedAccounts(ctx context.Context, query *AccountQuery, nodes []*Visitor, init func(*Visitor), assign func(*Visitor, *Account)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Visitor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Account(func(s *sql.Selector) {
		s.Where(sql.InValues(visitor.ManagedAccountsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.visitor_managed_accounts
		if fk == nil {
			return fmt.Errorf(`foreign-key "visitor_managed_accounts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "visitor_managed_accounts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VisitorQuery) loadCarts(ctx context.Context, query *CartQuery, nodes []*Visitor, init func(*Visitor), assign func(*Visitor, *Cart)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Visitor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.InValues(visitor.CartsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.visitor_carts
		if fk == nil {
			return fmt.Errorf(`foreign-key "visitor_carts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "visitor_carts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vq *VisitorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vq.querySpec()
	_spec.Node.Columns = vq.fields
	if len(vq.fields) > 0 {
		_spec.Unique = vq.unique != nil && *vq.unique
	}
	return sqlgraph.CountNodes(ctx, vq.driver, _spec)
}

func (vq *VisitorQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := vq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (vq *VisitorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitor.Table,
			Columns: visitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		},
		From:   vq.sql,
		Unique: true,
	}
	if unique := vq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitor.FieldID)
		for i := range fields {
			if fields[i] != visitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vq *VisitorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vq.driver.Dialect())
	t1 := builder.Table(visitor.Table)
	columns := vq.fields
	if len(columns) == 0 {
		columns = visitor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vq.sql != nil {
		selector = vq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vq.unique != nil && *vq.unique {
		selector.Distinct()
	}
	for _, p := range vq.predicates {
		p(selector)
	}
	for _, p := range vq.order {
		p(selector)
	}
	if offset := vq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VisitorGroupBy is the group-by builder for Visitor entities.
type VisitorGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vgb *VisitorGroupBy) Aggregate(fns ...AggregateFunc) *VisitorGroupBy {
	vgb.fns = append(vgb.fns, fns...)
	return vgb
}

// Scan applies the group-by query and scans the result into the given value.
func (vgb *VisitorGroupBy) Scan(ctx context.Context, v any) error {
	query, err := vgb.path(ctx)
	if err != nil {
		return err
	}
	vgb.sql = query
	return vgb.sqlScan(ctx, v)
}

func (vgb *VisitorGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range vgb.fields {
		if !visitor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vgb *VisitorGroupBy) sqlQuery() *sql.Selector {
	selector := vgb.sql.Select()
	aggregation := make([]string, 0, len(vgb.fns))
	for _, fn := range vgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vgb.fields)+len(vgb.fns))
		for _, f := range vgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vgb.fields...)...)
}

// VisitorSelect is the builder for selecting fields of Visitor entities.
type VisitorSelect struct {
	*VisitorQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vs *VisitorSelect) Aggregate(fns ...AggregateFunc) *VisitorSelect {
	vs.fns = append(vs.fns, fns...)
	return vs
}

// Scan applies the selector query and scans the result into the given value.
func (vs *VisitorSelect) Scan(ctx context.Context, v any) error {
	if err := vs.prepareQuery(ctx); err != nil {
		return err
	}
	vs.sql = vs.VisitorQuery.sqlQuery(ctx)
	return vs.sqlScan(ctx, v)
}

func (vs *VisitorSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(vs.fns))
	for _, fn := range vs.fns {
		aggregation = append(aggregation, fn(vs.sql))
	}
	switch n := len(*vs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		vs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		vs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := vs.sql.Query()
	if err := vs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
