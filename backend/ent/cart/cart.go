// Code generated by ent, DO NOT EDIT.

package cart

import (
	"time"
)

const (
	// Label holds the string label denoting the cart type in the database.
	Label = "cart"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVisitorID holds the string denoting the visitor_id field in the database.
	FieldVisitorID = "visitor_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeCartDetails holds the string denoting the cart_details edge name in mutations.
	EdgeCartDetails = "cart_details"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the cart in the database.
	Table = "carts"
	// CartDetailsTable is the table that holds the cart_details relation/edge.
	CartDetailsTable = "cart_details"
	// CartDetailsInverseTable is the table name for the CartDetail entity.
	// It exists in this package in order to avoid circular dependency with the "cartdetail" package.
	CartDetailsInverseTable = "cart_details"
	// CartDetailsColumn is the table column denoting the cart_details relation/edge.
	CartDetailsColumn = "cart_cart_details"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "carts"
	// OwnerInverseTable is the table name for the Visitor entity.
	// It exists in this package in order to avoid circular dependency with the "visitor" package.
	OwnerInverseTable = "visitors"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "visitor_carts"
)

// Columns holds all SQL columns for cart fields.
var Columns = []string{
	FieldID,
	FieldVisitorID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"visitor_carts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// VisitorIDValidator is a validator for the "visitor_id" field. It is called by the builders before save.
	VisitorIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
