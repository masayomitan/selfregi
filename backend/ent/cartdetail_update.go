// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/cart"
	"selfregi/ent/cartdetail"
	"selfregi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// CartDetailUpdate is the builder for updating CartDetail entities.
type CartDetailUpdate struct {
	config
	hooks    []Hook
	mutation *CartDetailMutation
}

// Where appends a list predicates to the CartDetailUpdate builder.
func (cdu *CartDetailUpdate) Where(ps ...predicate.CartDetail) *CartDetailUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetUpdatedAt sets the "updated_at" field.
func (cdu *CartDetailUpdate) SetUpdatedAt(t time.Time) *CartDetailUpdate {
	cdu.mutation.SetUpdatedAt(t)
	return cdu
}

// SetDeletedAt sets the "deleted_at" field.
func (cdu *CartDetailUpdate) SetDeletedAt(t time.Time) *CartDetailUpdate {
	cdu.mutation.SetDeletedAt(t)
	return cdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableDeletedAt(t *time.Time) *CartDetailUpdate {
	if t != nil {
		cdu.SetDeletedAt(*t)
	}
	return cdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cdu *CartDetailUpdate) ClearDeletedAt() *CartDetailUpdate {
	cdu.mutation.ClearDeletedAt()
	return cdu
}

// SetAccountID sets the "account_id" field.
func (cdu *CartDetailUpdate) SetAccountID(i int) *CartDetailUpdate {
	cdu.mutation.ResetAccountID()
	cdu.mutation.SetAccountID(i)
	return cdu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableAccountID(i *int) *CartDetailUpdate {
	if i != nil {
		cdu.SetAccountID(*i)
	}
	return cdu
}

// AddAccountID adds i to the "account_id" field.
func (cdu *CartDetailUpdate) AddAccountID(i int) *CartDetailUpdate {
	cdu.mutation.AddAccountID(i)
	return cdu
}

// ClearAccountID clears the value of the "account_id" field.
func (cdu *CartDetailUpdate) ClearAccountID() *CartDetailUpdate {
	cdu.mutation.ClearAccountID()
	return cdu
}

// SetVisitorID sets the "visitor_id" field.
func (cdu *CartDetailUpdate) SetVisitorID(i int) *CartDetailUpdate {
	cdu.mutation.ResetVisitorID()
	cdu.mutation.SetVisitorID(i)
	return cdu
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableVisitorID(i *int) *CartDetailUpdate {
	if i != nil {
		cdu.SetVisitorID(*i)
	}
	return cdu
}

// AddVisitorID adds i to the "visitor_id" field.
func (cdu *CartDetailUpdate) AddVisitorID(i int) *CartDetailUpdate {
	cdu.mutation.AddVisitorID(i)
	return cdu
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (cdu *CartDetailUpdate) ClearVisitorID() *CartDetailUpdate {
	cdu.mutation.ClearVisitorID()
	return cdu
}

// SetProductID sets the "product_id" field.
func (cdu *CartDetailUpdate) SetProductID(i int) *CartDetailUpdate {
	cdu.mutation.ResetProductID()
	cdu.mutation.SetProductID(i)
	return cdu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableProductID(i *int) *CartDetailUpdate {
	if i != nil {
		cdu.SetProductID(*i)
	}
	return cdu
}

// AddProductID adds i to the "product_id" field.
func (cdu *CartDetailUpdate) AddProductID(i int) *CartDetailUpdate {
	cdu.mutation.AddProductID(i)
	return cdu
}

// ClearProductID clears the value of the "product_id" field.
func (cdu *CartDetailUpdate) ClearProductID() *CartDetailUpdate {
	cdu.mutation.ClearProductID()
	return cdu
}

// SetCategoryID sets the "category_id" field.
func (cdu *CartDetailUpdate) SetCategoryID(i int) *CartDetailUpdate {
	cdu.mutation.ResetCategoryID()
	cdu.mutation.SetCategoryID(i)
	return cdu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableCategoryID(i *int) *CartDetailUpdate {
	if i != nil {
		cdu.SetCategoryID(*i)
	}
	return cdu
}

// AddCategoryID adds i to the "category_id" field.
func (cdu *CartDetailUpdate) AddCategoryID(i int) *CartDetailUpdate {
	cdu.mutation.AddCategoryID(i)
	return cdu
}

// ClearCategoryID clears the value of the "category_id" field.
func (cdu *CartDetailUpdate) ClearCategoryID() *CartDetailUpdate {
	cdu.mutation.ClearCategoryID()
	return cdu
}

// SetData sets the "data" field.
func (cdu *CartDetailUpdate) SetData(s []string) *CartDetailUpdate {
	cdu.mutation.SetData(s)
	return cdu
}

// AppendData appends s to the "data" field.
func (cdu *CartDetailUpdate) AppendData(s []string) *CartDetailUpdate {
	cdu.mutation.AppendData(s)
	return cdu
}

// ClearData clears the value of the "data" field.
func (cdu *CartDetailUpdate) ClearData() *CartDetailUpdate {
	cdu.mutation.ClearData()
	return cdu
}

// SetOptions sets the "options" field.
func (cdu *CartDetailUpdate) SetOptions(s []string) *CartDetailUpdate {
	cdu.mutation.SetOptions(s)
	return cdu
}

// AppendOptions appends s to the "options" field.
func (cdu *CartDetailUpdate) AppendOptions(s []string) *CartDetailUpdate {
	cdu.mutation.AppendOptions(s)
	return cdu
}

// ClearOptions clears the value of the "options" field.
func (cdu *CartDetailUpdate) ClearOptions() *CartDetailUpdate {
	cdu.mutation.ClearOptions()
	return cdu
}

// SetQuantity sets the "quantity" field.
func (cdu *CartDetailUpdate) SetQuantity(i int) *CartDetailUpdate {
	cdu.mutation.ResetQuantity()
	cdu.mutation.SetQuantity(i)
	return cdu
}

// AddQuantity adds i to the "quantity" field.
func (cdu *CartDetailUpdate) AddQuantity(i int) *CartDetailUpdate {
	cdu.mutation.AddQuantity(i)
	return cdu
}

// SetPrice sets the "price" field.
func (cdu *CartDetailUpdate) SetPrice(i int) *CartDetailUpdate {
	cdu.mutation.ResetPrice()
	cdu.mutation.SetPrice(i)
	return cdu
}

// AddPrice adds i to the "price" field.
func (cdu *CartDetailUpdate) AddPrice(i int) *CartDetailUpdate {
	cdu.mutation.AddPrice(i)
	return cdu
}

// SetTax sets the "tax" field.
func (cdu *CartDetailUpdate) SetTax(i int) *CartDetailUpdate {
	cdu.mutation.ResetTax()
	cdu.mutation.SetTax(i)
	return cdu
}

// AddTax adds i to the "tax" field.
func (cdu *CartDetailUpdate) AddTax(i int) *CartDetailUpdate {
	cdu.mutation.AddTax(i)
	return cdu
}

// SetTaxRate sets the "tax_rate" field.
func (cdu *CartDetailUpdate) SetTaxRate(i int) *CartDetailUpdate {
	cdu.mutation.ResetTaxRate()
	cdu.mutation.SetTaxRate(i)
	return cdu
}

// AddTaxRate adds i to the "tax_rate" field.
func (cdu *CartDetailUpdate) AddTaxRate(i int) *CartDetailUpdate {
	cdu.mutation.AddTaxRate(i)
	return cdu
}

// SetDiscountID sets the "discount_id" field.
func (cdu *CartDetailUpdate) SetDiscountID(i int) *CartDetailUpdate {
	cdu.mutation.ResetDiscountID()
	cdu.mutation.SetDiscountID(i)
	return cdu
}

// SetNillableDiscountID sets the "discount_id" field if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableDiscountID(i *int) *CartDetailUpdate {
	if i != nil {
		cdu.SetDiscountID(*i)
	}
	return cdu
}

// AddDiscountID adds i to the "discount_id" field.
func (cdu *CartDetailUpdate) AddDiscountID(i int) *CartDetailUpdate {
	cdu.mutation.AddDiscountID(i)
	return cdu
}

// ClearDiscountID clears the value of the "discount_id" field.
func (cdu *CartDetailUpdate) ClearDiscountID() *CartDetailUpdate {
	cdu.mutation.ClearDiscountID()
	return cdu
}

// SetDiscountName sets the "discount_name" field.
func (cdu *CartDetailUpdate) SetDiscountName(s string) *CartDetailUpdate {
	cdu.mutation.SetDiscountName(s)
	return cdu
}

// SetDiscountClass sets the "discount_class" field.
func (cdu *CartDetailUpdate) SetDiscountClass(u uint) *CartDetailUpdate {
	cdu.mutation.ResetDiscountClass()
	cdu.mutation.SetDiscountClass(u)
	return cdu
}

// AddDiscountClass adds u to the "discount_class" field.
func (cdu *CartDetailUpdate) AddDiscountClass(u int) *CartDetailUpdate {
	cdu.mutation.AddDiscountClass(u)
	return cdu
}

// SetDiscountRate sets the "discount_rate" field.
func (cdu *CartDetailUpdate) SetDiscountRate(d decimal.Decimal) *CartDetailUpdate {
	cdu.mutation.ResetDiscountRate()
	cdu.mutation.SetDiscountRate(d)
	return cdu
}

// AddDiscountRate adds d to the "discount_rate" field.
func (cdu *CartDetailUpdate) AddDiscountRate(d decimal.Decimal) *CartDetailUpdate {
	cdu.mutation.AddDiscountRate(d)
	return cdu
}

// SetDiscountPrice sets the "discount_price" field.
func (cdu *CartDetailUpdate) SetDiscountPrice(i int) *CartDetailUpdate {
	cdu.mutation.ResetDiscountPrice()
	cdu.mutation.SetDiscountPrice(i)
	return cdu
}

// AddDiscountPrice adds i to the "discount_price" field.
func (cdu *CartDetailUpdate) AddDiscountPrice(i int) *CartDetailUpdate {
	cdu.mutation.AddDiscountPrice(i)
	return cdu
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (cdu *CartDetailUpdate) SetCartID(id int) *CartDetailUpdate {
	cdu.mutation.SetCartID(id)
	return cdu
}

// SetNillableCartID sets the "cart" edge to the Cart entity by ID if the given value is not nil.
func (cdu *CartDetailUpdate) SetNillableCartID(id *int) *CartDetailUpdate {
	if id != nil {
		cdu = cdu.SetCartID(*id)
	}
	return cdu
}

// SetCart sets the "cart" edge to the Cart entity.
func (cdu *CartDetailUpdate) SetCart(c *Cart) *CartDetailUpdate {
	return cdu.SetCartID(c.ID)
}

// Mutation returns the CartDetailMutation object of the builder.
func (cdu *CartDetailUpdate) Mutation() *CartDetailMutation {
	return cdu.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (cdu *CartDetailUpdate) ClearCart() *CartDetailUpdate {
	cdu.mutation.ClearCart()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CartDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cdu.defaults()
	if len(cdu.hooks) == 0 {
		if err = cdu.check(); err != nil {
			return 0, err
		}
		affected, err = cdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cdu.check(); err != nil {
				return 0, err
			}
			cdu.mutation = mutation
			affected, err = cdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cdu.hooks) - 1; i >= 0; i-- {
			if cdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CartDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CartDetailUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CartDetailUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CartDetailUpdate) defaults() {
	if _, ok := cdu.mutation.UpdatedAt(); !ok {
		v := cartdetail.UpdateDefaultUpdatedAt()
		cdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CartDetailUpdate) check() error {
	if v, ok := cdu.mutation.AccountID(); ok {
		if err := cartdetail.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.account_id": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.VisitorID(); ok {
		if err := cartdetail.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.visitor_id": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.ProductID(); ok {
		if err := cartdetail.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.product_id": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.CategoryID(); ok {
		if err := cartdetail.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.category_id": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.Quantity(); ok {
		if err := cartdetail.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "CartDetail.quantity": %w`, err)}
		}
	}
	if v, ok := cdu.mutation.DiscountID(); ok {
		if err := cartdetail.DiscountIDValidator(v); err != nil {
			return &ValidationError{Name: "discount_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.discount_id": %w`, err)}
		}
	}
	return nil
}

func (cdu *CartDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartdetail.Table,
			Columns: cartdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartdetail.FieldID,
			},
		},
	}
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.UpdatedAt(); ok {
		_spec.SetField(cartdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cdu.mutation.DeletedAt(); ok {
		_spec.SetField(cartdetail.FieldDeletedAt, field.TypeTime, value)
	}
	if cdu.mutation.DeletedAtCleared() {
		_spec.ClearField(cartdetail.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cdu.mutation.AccountID(); ok {
		_spec.SetField(cartdetail.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedAccountID(); ok {
		_spec.AddField(cartdetail.FieldAccountID, field.TypeInt, value)
	}
	if cdu.mutation.AccountIDCleared() {
		_spec.ClearField(cartdetail.FieldAccountID, field.TypeInt)
	}
	if value, ok := cdu.mutation.VisitorID(); ok {
		_spec.SetField(cartdetail.FieldVisitorID, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedVisitorID(); ok {
		_spec.AddField(cartdetail.FieldVisitorID, field.TypeInt, value)
	}
	if cdu.mutation.VisitorIDCleared() {
		_spec.ClearField(cartdetail.FieldVisitorID, field.TypeInt)
	}
	if value, ok := cdu.mutation.ProductID(); ok {
		_spec.SetField(cartdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedProductID(); ok {
		_spec.AddField(cartdetail.FieldProductID, field.TypeInt, value)
	}
	if cdu.mutation.ProductIDCleared() {
		_spec.ClearField(cartdetail.FieldProductID, field.TypeInt)
	}
	if value, ok := cdu.mutation.CategoryID(); ok {
		_spec.SetField(cartdetail.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedCategoryID(); ok {
		_spec.AddField(cartdetail.FieldCategoryID, field.TypeInt, value)
	}
	if cdu.mutation.CategoryIDCleared() {
		_spec.ClearField(cartdetail.FieldCategoryID, field.TypeInt)
	}
	if value, ok := cdu.mutation.Data(); ok {
		_spec.SetField(cartdetail.FieldData, field.TypeJSON, value)
	}
	if value, ok := cdu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cartdetail.FieldData, value)
		})
	}
	if cdu.mutation.DataCleared() {
		_spec.ClearField(cartdetail.FieldData, field.TypeJSON)
	}
	if value, ok := cdu.mutation.Options(); ok {
		_spec.SetField(cartdetail.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := cdu.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cartdetail.FieldOptions, value)
		})
	}
	if cdu.mutation.OptionsCleared() {
		_spec.ClearField(cartdetail.FieldOptions, field.TypeJSON)
	}
	if value, ok := cdu.mutation.Quantity(); ok {
		_spec.SetField(cartdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedQuantity(); ok {
		_spec.AddField(cartdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.Price(); ok {
		_spec.SetField(cartdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedPrice(); ok {
		_spec.AddField(cartdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.Tax(); ok {
		_spec.SetField(cartdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedTax(); ok {
		_spec.AddField(cartdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.TaxRate(); ok {
		_spec.SetField(cartdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedTaxRate(); ok {
		_spec.AddField(cartdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.DiscountID(); ok {
		_spec.SetField(cartdetail.FieldDiscountID, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedDiscountID(); ok {
		_spec.AddField(cartdetail.FieldDiscountID, field.TypeInt, value)
	}
	if cdu.mutation.DiscountIDCleared() {
		_spec.ClearField(cartdetail.FieldDiscountID, field.TypeInt)
	}
	if value, ok := cdu.mutation.DiscountName(); ok {
		_spec.SetField(cartdetail.FieldDiscountName, field.TypeString, value)
	}
	if value, ok := cdu.mutation.DiscountClass(); ok {
		_spec.SetField(cartdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := cdu.mutation.AddedDiscountClass(); ok {
		_spec.AddField(cartdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := cdu.mutation.DiscountRate(); ok {
		_spec.SetField(cartdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := cdu.mutation.AddedDiscountRate(); ok {
		_spec.AddField(cartdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := cdu.mutation.DiscountPrice(); ok {
		_spec.SetField(cartdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(cartdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if cdu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartdetail.CartTable,
			Columns: []string{cartdetail.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartdetail.CartTable,
			Columns: []string{cartdetail.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CartDetailUpdateOne is the builder for updating a single CartDetail entity.
type CartDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartDetailMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cduo *CartDetailUpdateOne) SetUpdatedAt(t time.Time) *CartDetailUpdateOne {
	cduo.mutation.SetUpdatedAt(t)
	return cduo
}

// SetDeletedAt sets the "deleted_at" field.
func (cduo *CartDetailUpdateOne) SetDeletedAt(t time.Time) *CartDetailUpdateOne {
	cduo.mutation.SetDeletedAt(t)
	return cduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableDeletedAt(t *time.Time) *CartDetailUpdateOne {
	if t != nil {
		cduo.SetDeletedAt(*t)
	}
	return cduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cduo *CartDetailUpdateOne) ClearDeletedAt() *CartDetailUpdateOne {
	cduo.mutation.ClearDeletedAt()
	return cduo
}

// SetAccountID sets the "account_id" field.
func (cduo *CartDetailUpdateOne) SetAccountID(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetAccountID()
	cduo.mutation.SetAccountID(i)
	return cduo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableAccountID(i *int) *CartDetailUpdateOne {
	if i != nil {
		cduo.SetAccountID(*i)
	}
	return cduo
}

// AddAccountID adds i to the "account_id" field.
func (cduo *CartDetailUpdateOne) AddAccountID(i int) *CartDetailUpdateOne {
	cduo.mutation.AddAccountID(i)
	return cduo
}

// ClearAccountID clears the value of the "account_id" field.
func (cduo *CartDetailUpdateOne) ClearAccountID() *CartDetailUpdateOne {
	cduo.mutation.ClearAccountID()
	return cduo
}

// SetVisitorID sets the "visitor_id" field.
func (cduo *CartDetailUpdateOne) SetVisitorID(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetVisitorID()
	cduo.mutation.SetVisitorID(i)
	return cduo
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableVisitorID(i *int) *CartDetailUpdateOne {
	if i != nil {
		cduo.SetVisitorID(*i)
	}
	return cduo
}

// AddVisitorID adds i to the "visitor_id" field.
func (cduo *CartDetailUpdateOne) AddVisitorID(i int) *CartDetailUpdateOne {
	cduo.mutation.AddVisitorID(i)
	return cduo
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (cduo *CartDetailUpdateOne) ClearVisitorID() *CartDetailUpdateOne {
	cduo.mutation.ClearVisitorID()
	return cduo
}

// SetProductID sets the "product_id" field.
func (cduo *CartDetailUpdateOne) SetProductID(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetProductID()
	cduo.mutation.SetProductID(i)
	return cduo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableProductID(i *int) *CartDetailUpdateOne {
	if i != nil {
		cduo.SetProductID(*i)
	}
	return cduo
}

// AddProductID adds i to the "product_id" field.
func (cduo *CartDetailUpdateOne) AddProductID(i int) *CartDetailUpdateOne {
	cduo.mutation.AddProductID(i)
	return cduo
}

// ClearProductID clears the value of the "product_id" field.
func (cduo *CartDetailUpdateOne) ClearProductID() *CartDetailUpdateOne {
	cduo.mutation.ClearProductID()
	return cduo
}

// SetCategoryID sets the "category_id" field.
func (cduo *CartDetailUpdateOne) SetCategoryID(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetCategoryID()
	cduo.mutation.SetCategoryID(i)
	return cduo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableCategoryID(i *int) *CartDetailUpdateOne {
	if i != nil {
		cduo.SetCategoryID(*i)
	}
	return cduo
}

// AddCategoryID adds i to the "category_id" field.
func (cduo *CartDetailUpdateOne) AddCategoryID(i int) *CartDetailUpdateOne {
	cduo.mutation.AddCategoryID(i)
	return cduo
}

// ClearCategoryID clears the value of the "category_id" field.
func (cduo *CartDetailUpdateOne) ClearCategoryID() *CartDetailUpdateOne {
	cduo.mutation.ClearCategoryID()
	return cduo
}

// SetData sets the "data" field.
func (cduo *CartDetailUpdateOne) SetData(s []string) *CartDetailUpdateOne {
	cduo.mutation.SetData(s)
	return cduo
}

// AppendData appends s to the "data" field.
func (cduo *CartDetailUpdateOne) AppendData(s []string) *CartDetailUpdateOne {
	cduo.mutation.AppendData(s)
	return cduo
}

// ClearData clears the value of the "data" field.
func (cduo *CartDetailUpdateOne) ClearData() *CartDetailUpdateOne {
	cduo.mutation.ClearData()
	return cduo
}

// SetOptions sets the "options" field.
func (cduo *CartDetailUpdateOne) SetOptions(s []string) *CartDetailUpdateOne {
	cduo.mutation.SetOptions(s)
	return cduo
}

// AppendOptions appends s to the "options" field.
func (cduo *CartDetailUpdateOne) AppendOptions(s []string) *CartDetailUpdateOne {
	cduo.mutation.AppendOptions(s)
	return cduo
}

// ClearOptions clears the value of the "options" field.
func (cduo *CartDetailUpdateOne) ClearOptions() *CartDetailUpdateOne {
	cduo.mutation.ClearOptions()
	return cduo
}

// SetQuantity sets the "quantity" field.
func (cduo *CartDetailUpdateOne) SetQuantity(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetQuantity()
	cduo.mutation.SetQuantity(i)
	return cduo
}

// AddQuantity adds i to the "quantity" field.
func (cduo *CartDetailUpdateOne) AddQuantity(i int) *CartDetailUpdateOne {
	cduo.mutation.AddQuantity(i)
	return cduo
}

// SetPrice sets the "price" field.
func (cduo *CartDetailUpdateOne) SetPrice(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetPrice()
	cduo.mutation.SetPrice(i)
	return cduo
}

// AddPrice adds i to the "price" field.
func (cduo *CartDetailUpdateOne) AddPrice(i int) *CartDetailUpdateOne {
	cduo.mutation.AddPrice(i)
	return cduo
}

// SetTax sets the "tax" field.
func (cduo *CartDetailUpdateOne) SetTax(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetTax()
	cduo.mutation.SetTax(i)
	return cduo
}

// AddTax adds i to the "tax" field.
func (cduo *CartDetailUpdateOne) AddTax(i int) *CartDetailUpdateOne {
	cduo.mutation.AddTax(i)
	return cduo
}

// SetTaxRate sets the "tax_rate" field.
func (cduo *CartDetailUpdateOne) SetTaxRate(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetTaxRate()
	cduo.mutation.SetTaxRate(i)
	return cduo
}

// AddTaxRate adds i to the "tax_rate" field.
func (cduo *CartDetailUpdateOne) AddTaxRate(i int) *CartDetailUpdateOne {
	cduo.mutation.AddTaxRate(i)
	return cduo
}

// SetDiscountID sets the "discount_id" field.
func (cduo *CartDetailUpdateOne) SetDiscountID(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetDiscountID()
	cduo.mutation.SetDiscountID(i)
	return cduo
}

// SetNillableDiscountID sets the "discount_id" field if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableDiscountID(i *int) *CartDetailUpdateOne {
	if i != nil {
		cduo.SetDiscountID(*i)
	}
	return cduo
}

// AddDiscountID adds i to the "discount_id" field.
func (cduo *CartDetailUpdateOne) AddDiscountID(i int) *CartDetailUpdateOne {
	cduo.mutation.AddDiscountID(i)
	return cduo
}

// ClearDiscountID clears the value of the "discount_id" field.
func (cduo *CartDetailUpdateOne) ClearDiscountID() *CartDetailUpdateOne {
	cduo.mutation.ClearDiscountID()
	return cduo
}

// SetDiscountName sets the "discount_name" field.
func (cduo *CartDetailUpdateOne) SetDiscountName(s string) *CartDetailUpdateOne {
	cduo.mutation.SetDiscountName(s)
	return cduo
}

// SetDiscountClass sets the "discount_class" field.
func (cduo *CartDetailUpdateOne) SetDiscountClass(u uint) *CartDetailUpdateOne {
	cduo.mutation.ResetDiscountClass()
	cduo.mutation.SetDiscountClass(u)
	return cduo
}

// AddDiscountClass adds u to the "discount_class" field.
func (cduo *CartDetailUpdateOne) AddDiscountClass(u int) *CartDetailUpdateOne {
	cduo.mutation.AddDiscountClass(u)
	return cduo
}

// SetDiscountRate sets the "discount_rate" field.
func (cduo *CartDetailUpdateOne) SetDiscountRate(d decimal.Decimal) *CartDetailUpdateOne {
	cduo.mutation.ResetDiscountRate()
	cduo.mutation.SetDiscountRate(d)
	return cduo
}

// AddDiscountRate adds d to the "discount_rate" field.
func (cduo *CartDetailUpdateOne) AddDiscountRate(d decimal.Decimal) *CartDetailUpdateOne {
	cduo.mutation.AddDiscountRate(d)
	return cduo
}

// SetDiscountPrice sets the "discount_price" field.
func (cduo *CartDetailUpdateOne) SetDiscountPrice(i int) *CartDetailUpdateOne {
	cduo.mutation.ResetDiscountPrice()
	cduo.mutation.SetDiscountPrice(i)
	return cduo
}

// AddDiscountPrice adds i to the "discount_price" field.
func (cduo *CartDetailUpdateOne) AddDiscountPrice(i int) *CartDetailUpdateOne {
	cduo.mutation.AddDiscountPrice(i)
	return cduo
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (cduo *CartDetailUpdateOne) SetCartID(id int) *CartDetailUpdateOne {
	cduo.mutation.SetCartID(id)
	return cduo
}

// SetNillableCartID sets the "cart" edge to the Cart entity by ID if the given value is not nil.
func (cduo *CartDetailUpdateOne) SetNillableCartID(id *int) *CartDetailUpdateOne {
	if id != nil {
		cduo = cduo.SetCartID(*id)
	}
	return cduo
}

// SetCart sets the "cart" edge to the Cart entity.
func (cduo *CartDetailUpdateOne) SetCart(c *Cart) *CartDetailUpdateOne {
	return cduo.SetCartID(c.ID)
}

// Mutation returns the CartDetailMutation object of the builder.
func (cduo *CartDetailUpdateOne) Mutation() *CartDetailMutation {
	return cduo.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (cduo *CartDetailUpdateOne) ClearCart() *CartDetailUpdateOne {
	cduo.mutation.ClearCart()
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CartDetailUpdateOne) Select(field string, fields ...string) *CartDetailUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CartDetail entity.
func (cduo *CartDetailUpdateOne) Save(ctx context.Context) (*CartDetail, error) {
	var (
		err  error
		node *CartDetail
	)
	cduo.defaults()
	if len(cduo.hooks) == 0 {
		if err = cduo.check(); err != nil {
			return nil, err
		}
		node, err = cduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cduo.check(); err != nil {
				return nil, err
			}
			cduo.mutation = mutation
			node, err = cduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cduo.hooks) - 1; i >= 0; i-- {
			if cduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CartDetail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CartDetailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CartDetailUpdateOne) SaveX(ctx context.Context) *CartDetail {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CartDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CartDetailUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CartDetailUpdateOne) defaults() {
	if _, ok := cduo.mutation.UpdatedAt(); !ok {
		v := cartdetail.UpdateDefaultUpdatedAt()
		cduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CartDetailUpdateOne) check() error {
	if v, ok := cduo.mutation.AccountID(); ok {
		if err := cartdetail.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.account_id": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.VisitorID(); ok {
		if err := cartdetail.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.visitor_id": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.ProductID(); ok {
		if err := cartdetail.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.product_id": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.CategoryID(); ok {
		if err := cartdetail.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.category_id": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.Quantity(); ok {
		if err := cartdetail.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "CartDetail.quantity": %w`, err)}
		}
	}
	if v, ok := cduo.mutation.DiscountID(); ok {
		if err := cartdetail.DiscountIDValidator(v); err != nil {
			return &ValidationError{Name: "discount_id", err: fmt.Errorf(`ent: validator failed for field "CartDetail.discount_id": %w`, err)}
		}
	}
	return nil
}

func (cduo *CartDetailUpdateOne) sqlSave(ctx context.Context) (_node *CartDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartdetail.Table,
			Columns: cartdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartdetail.FieldID,
			},
		},
	}
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartdetail.FieldID)
		for _, f := range fields {
			if !cartdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.UpdatedAt(); ok {
		_spec.SetField(cartdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cduo.mutation.DeletedAt(); ok {
		_spec.SetField(cartdetail.FieldDeletedAt, field.TypeTime, value)
	}
	if cduo.mutation.DeletedAtCleared() {
		_spec.ClearField(cartdetail.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cduo.mutation.AccountID(); ok {
		_spec.SetField(cartdetail.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedAccountID(); ok {
		_spec.AddField(cartdetail.FieldAccountID, field.TypeInt, value)
	}
	if cduo.mutation.AccountIDCleared() {
		_spec.ClearField(cartdetail.FieldAccountID, field.TypeInt)
	}
	if value, ok := cduo.mutation.VisitorID(); ok {
		_spec.SetField(cartdetail.FieldVisitorID, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedVisitorID(); ok {
		_spec.AddField(cartdetail.FieldVisitorID, field.TypeInt, value)
	}
	if cduo.mutation.VisitorIDCleared() {
		_spec.ClearField(cartdetail.FieldVisitorID, field.TypeInt)
	}
	if value, ok := cduo.mutation.ProductID(); ok {
		_spec.SetField(cartdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedProductID(); ok {
		_spec.AddField(cartdetail.FieldProductID, field.TypeInt, value)
	}
	if cduo.mutation.ProductIDCleared() {
		_spec.ClearField(cartdetail.FieldProductID, field.TypeInt)
	}
	if value, ok := cduo.mutation.CategoryID(); ok {
		_spec.SetField(cartdetail.FieldCategoryID, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedCategoryID(); ok {
		_spec.AddField(cartdetail.FieldCategoryID, field.TypeInt, value)
	}
	if cduo.mutation.CategoryIDCleared() {
		_spec.ClearField(cartdetail.FieldCategoryID, field.TypeInt)
	}
	if value, ok := cduo.mutation.Data(); ok {
		_spec.SetField(cartdetail.FieldData, field.TypeJSON, value)
	}
	if value, ok := cduo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cartdetail.FieldData, value)
		})
	}
	if cduo.mutation.DataCleared() {
		_spec.ClearField(cartdetail.FieldData, field.TypeJSON)
	}
	if value, ok := cduo.mutation.Options(); ok {
		_spec.SetField(cartdetail.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := cduo.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cartdetail.FieldOptions, value)
		})
	}
	if cduo.mutation.OptionsCleared() {
		_spec.ClearField(cartdetail.FieldOptions, field.TypeJSON)
	}
	if value, ok := cduo.mutation.Quantity(); ok {
		_spec.SetField(cartdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedQuantity(); ok {
		_spec.AddField(cartdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.Price(); ok {
		_spec.SetField(cartdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedPrice(); ok {
		_spec.AddField(cartdetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.Tax(); ok {
		_spec.SetField(cartdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedTax(); ok {
		_spec.AddField(cartdetail.FieldTax, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.TaxRate(); ok {
		_spec.SetField(cartdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedTaxRate(); ok {
		_spec.AddField(cartdetail.FieldTaxRate, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.DiscountID(); ok {
		_spec.SetField(cartdetail.FieldDiscountID, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedDiscountID(); ok {
		_spec.AddField(cartdetail.FieldDiscountID, field.TypeInt, value)
	}
	if cduo.mutation.DiscountIDCleared() {
		_spec.ClearField(cartdetail.FieldDiscountID, field.TypeInt)
	}
	if value, ok := cduo.mutation.DiscountName(); ok {
		_spec.SetField(cartdetail.FieldDiscountName, field.TypeString, value)
	}
	if value, ok := cduo.mutation.DiscountClass(); ok {
		_spec.SetField(cartdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := cduo.mutation.AddedDiscountClass(); ok {
		_spec.AddField(cartdetail.FieldDiscountClass, field.TypeUint, value)
	}
	if value, ok := cduo.mutation.DiscountRate(); ok {
		_spec.SetField(cartdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := cduo.mutation.AddedDiscountRate(); ok {
		_spec.AddField(cartdetail.FieldDiscountRate, field.TypeFloat64, value)
	}
	if value, ok := cduo.mutation.DiscountPrice(); ok {
		_spec.SetField(cartdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(cartdetail.FieldDiscountPrice, field.TypeInt, value)
	}
	if cduo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartdetail.CartTable,
			Columns: []string{cartdetail.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartdetail.CartTable,
			Columns: []string{cartdetail.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartDetail{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
