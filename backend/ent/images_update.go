// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/images"
	"selfregi/ent/item"
	"selfregi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImagesUpdate is the builder for updating Images entities.
type ImagesUpdate struct {
	config
	hooks    []Hook
	mutation *ImagesMutation
}

// Where appends a list predicates to the ImagesUpdate builder.
func (iu *ImagesUpdate) Where(ps ...predicate.Images) *ImagesUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImagesUpdate) SetUpdatedAt(t time.Time) *ImagesUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ImagesUpdate) SetDeletedAt(t time.Time) *ImagesUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableDeletedAt(t *time.Time) *ImagesUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ImagesUpdate) ClearDeletedAt() *ImagesUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetName sets the "name" field.
func (iu *ImagesUpdate) SetName(s string) *ImagesUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetPath sets the "path" field.
func (iu *ImagesUpdate) SetPath(s string) *ImagesUpdate {
	iu.mutation.SetPath(s)
	return iu
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (iu *ImagesUpdate) AddItemIDs(ids ...int) *ImagesUpdate {
	iu.mutation.AddItemIDs(ids...)
	return iu
}

// AddItems adds the "items" edges to the Item entity.
func (iu *ImagesUpdate) AddItems(i ...*Item) *ImagesUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddItemIDs(ids...)
}

// Mutation returns the ImagesMutation object of the builder.
func (iu *ImagesUpdate) Mutation() *ImagesMutation {
	return iu.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (iu *ImagesUpdate) ClearItems() *ImagesUpdate {
	iu.mutation.ClearItems()
	return iu
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (iu *ImagesUpdate) RemoveItemIDs(ids ...int) *ImagesUpdate {
	iu.mutation.RemoveItemIDs(ids...)
	return iu
}

// RemoveItems removes "items" edges to Item entities.
func (iu *ImagesUpdate) RemoveItems(i ...*Item) *ImagesUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImagesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImagesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImagesUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImagesUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImagesUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ImagesUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := images.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

func (iu *ImagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   images.Table,
			Columns: images.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: images.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(images.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(images.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(images.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(images.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Path(); ok {
		_spec.SetField(images.FieldPath, field.TypeString, value)
	}
	if iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{images.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ImagesUpdateOne is the builder for updating a single Images entity.
type ImagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImagesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImagesUpdateOne) SetUpdatedAt(t time.Time) *ImagesUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ImagesUpdateOne) SetDeletedAt(t time.Time) *ImagesUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableDeletedAt(t *time.Time) *ImagesUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ImagesUpdateOne) ClearDeletedAt() *ImagesUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetName sets the "name" field.
func (iuo *ImagesUpdateOne) SetName(s string) *ImagesUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetPath sets the "path" field.
func (iuo *ImagesUpdateOne) SetPath(s string) *ImagesUpdateOne {
	iuo.mutation.SetPath(s)
	return iuo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (iuo *ImagesUpdateOne) AddItemIDs(ids ...int) *ImagesUpdateOne {
	iuo.mutation.AddItemIDs(ids...)
	return iuo
}

// AddItems adds the "items" edges to the Item entity.
func (iuo *ImagesUpdateOne) AddItems(i ...*Item) *ImagesUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddItemIDs(ids...)
}

// Mutation returns the ImagesMutation object of the builder.
func (iuo *ImagesUpdateOne) Mutation() *ImagesMutation {
	return iuo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (iuo *ImagesUpdateOne) ClearItems() *ImagesUpdateOne {
	iuo.mutation.ClearItems()
	return iuo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (iuo *ImagesUpdateOne) RemoveItemIDs(ids ...int) *ImagesUpdateOne {
	iuo.mutation.RemoveItemIDs(ids...)
	return iuo
}

// RemoveItems removes "items" edges to Item entities.
func (iuo *ImagesUpdateOne) RemoveItems(i ...*Item) *ImagesUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImagesUpdateOne) Select(field string, fields ...string) *ImagesUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Images entity.
func (iuo *ImagesUpdateOne) Save(ctx context.Context) (*Images, error) {
	var (
		err  error
		node *Images
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImagesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Images)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ImagesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImagesUpdateOne) SaveX(ctx context.Context) *Images {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImagesUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImagesUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ImagesUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := images.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

func (iuo *ImagesUpdateOne) sqlSave(ctx context.Context) (_node *Images, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   images.Table,
			Columns: images.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: images.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Images.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, images.FieldID)
		for _, f := range fields {
			if !images.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != images.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(images.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(images.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(images.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(images.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Path(); ok {
		_spec.SetField(images.FieldPath, field.TypeString, value)
	}
	if iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !iuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   images.ItemsTable,
			Columns: images.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Images{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{images.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
