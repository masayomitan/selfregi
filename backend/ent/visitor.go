// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"selfregi/ent/visitor"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Visitor is the model entity for the Visitor schema.
type Visitor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex int `json:"sex,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VisitorQuery when eager-loading is set.
	Edges VisitorEdges `json:"edges"`
}

// VisitorEdges holds the relations/edges for other nodes in the graph.
type VisitorEdges struct {
	// ManagedAccounts holds the value of the managed_accounts edge.
	ManagedAccounts []*Account `json:"managed_accounts,omitempty"`
	// Carts holds the value of the carts edge.
	Carts []*Cart `json:"carts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ManagedAccountsOrErr returns the ManagedAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e VisitorEdges) ManagedAccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.ManagedAccounts, nil
	}
	return nil, &NotLoadedError{edge: "managed_accounts"}
}

// CartsOrErr returns the Carts value or an error if the edge
// was not loaded in eager-loading.
func (e VisitorEdges) CartsOrErr() ([]*Cart, error) {
	if e.loadedTypes[1] {
		return e.Carts, nil
	}
	return nil, &NotLoadedError{edge: "carts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Visitor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case visitor.FieldID, visitor.FieldSex:
			values[i] = new(sql.NullInt64)
		case visitor.FieldName:
			values[i] = new(sql.NullString)
		case visitor.FieldCreatedAt, visitor.FieldUpdatedAt, visitor.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Visitor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Visitor fields.
func (v *Visitor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visitor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case visitor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case visitor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case visitor.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		case visitor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case visitor.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				v.Sex = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryManagedAccounts queries the "managed_accounts" edge of the Visitor entity.
func (v *Visitor) QueryManagedAccounts() *AccountQuery {
	return (&VisitorClient{config: v.config}).QueryManagedAccounts(v)
}

// QueryCarts queries the "carts" edge of the Visitor entity.
func (v *Visitor) QueryCarts() *CartQuery {
	return (&VisitorClient{config: v.config}).QueryCarts(v)
}

// Update returns a builder for updating this Visitor.
// Note that you need to call Visitor.Unwrap() before calling this method if this Visitor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Visitor) Update() *VisitorUpdateOne {
	return (&VisitorClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Visitor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Visitor) Unwrap() *Visitor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Visitor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Visitor) String() string {
	var builder strings.Builder
	builder.WriteString("Visitor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", v.Sex))
	builder.WriteByte(')')
	return builder.String()
}

// Visitors is a parsable slice of Visitor.
type Visitors []*Visitor

func (v Visitors) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
