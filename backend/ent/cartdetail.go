// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"selfregi/ent/cart"
	"selfregi/ent/cartdetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// CartDetail is the model entity for the CartDetail schema.
type CartDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// VisitorID holds the value of the "visitor_id" field.
	VisitorID int `json:"visitor_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// Data holds the value of the "data" field.
	Data []string `json:"data,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price *int `json:"price,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax *int `json:"tax,omitempty"`
	// TaxRate holds the value of the "tax_rate" field.
	TaxRate *int `json:"tax_rate,omitempty"`
	// DiscountID holds the value of the "discount_id" field.
	DiscountID *int `json:"discount_id,omitempty"`
	// DiscountName holds the value of the "discount_name" field.
	DiscountName *string `json:"discount_name,omitempty"`
	// DiscountClass holds the value of the "discount_class" field.
	DiscountClass *uint `json:"discount_class,omitempty"`
	// DiscountRate holds the value of the "discount_rate" field.
	DiscountRate *decimal.Decimal `json:"discount_rate,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice *int `json:"discount_price,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartDetailQuery when eager-loading is set.
	Edges             CartDetailEdges `json:"edges"`
	cart_cart_details *int
}

// CartDetailEdges holds the relations/edges for other nodes in the graph.
type CartDetailEdges struct {
	// Cart holds the value of the cart edge.
	Cart *Cart `json:"cart,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartDetailEdges) CartOrErr() (*Cart, error) {
	if e.loadedTypes[0] {
		if e.Cart == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cart.Label}
		}
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CartDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cartdetail.FieldDiscountRate:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case cartdetail.FieldData, cartdetail.FieldOptions:
			values[i] = new([]byte)
		case cartdetail.FieldID, cartdetail.FieldAccountID, cartdetail.FieldVisitorID, cartdetail.FieldProductID, cartdetail.FieldCategoryID, cartdetail.FieldQuantity, cartdetail.FieldPrice, cartdetail.FieldTax, cartdetail.FieldTaxRate, cartdetail.FieldDiscountID, cartdetail.FieldDiscountClass, cartdetail.FieldDiscountPrice:
			values[i] = new(sql.NullInt64)
		case cartdetail.FieldDiscountName:
			values[i] = new(sql.NullString)
		case cartdetail.FieldCreatedAt, cartdetail.FieldUpdatedAt, cartdetail.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case cartdetail.ForeignKeys[0]: // cart_cart_details
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CartDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CartDetail fields.
func (cd *CartDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cartdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cd.ID = int(value.Int64)
		case cartdetail.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				cd.AccountID = int(value.Int64)
			}
		case cartdetail.FieldVisitorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visitor_id", values[i])
			} else if value.Valid {
				cd.VisitorID = int(value.Int64)
			}
		case cartdetail.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				cd.ProductID = int(value.Int64)
			}
		case cartdetail.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				cd.CategoryID = int(value.Int64)
			}
		case cartdetail.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cd.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case cartdetail.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cd.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case cartdetail.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				cd.Quantity = int(value.Int64)
			}
		case cartdetail.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				cd.Price = new(int)
				*cd.Price = int(value.Int64)
			}
		case cartdetail.FieldTax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				cd.Tax = new(int)
				*cd.Tax = int(value.Int64)
			}
		case cartdetail.FieldTaxRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate", values[i])
			} else if value.Valid {
				cd.TaxRate = new(int)
				*cd.TaxRate = int(value.Int64)
			}
		case cartdetail.FieldDiscountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_id", values[i])
			} else if value.Valid {
				cd.DiscountID = new(int)
				*cd.DiscountID = int(value.Int64)
			}
		case cartdetail.FieldDiscountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_name", values[i])
			} else if value.Valid {
				cd.DiscountName = new(string)
				*cd.DiscountName = value.String
			}
		case cartdetail.FieldDiscountClass:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_class", values[i])
			} else if value.Valid {
				cd.DiscountClass = new(uint)
				*cd.DiscountClass = uint(value.Int64)
			}
		case cartdetail.FieldDiscountRate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discount_rate", values[i])
			} else if value.Valid {
				cd.DiscountRate = new(decimal.Decimal)
				*cd.DiscountRate = *value.S.(*decimal.Decimal)
			}
		case cartdetail.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				cd.DiscountPrice = new(int)
				*cd.DiscountPrice = int(value.Int64)
			}
		case cartdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cd.CreatedAt = value.Time
			}
		case cartdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cd.UpdatedAt = value.Time
			}
		case cartdetail.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cd.DeletedAt = new(time.Time)
				*cd.DeletedAt = value.Time
			}
		case cartdetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cart_cart_details", value)
			} else if value.Valid {
				cd.cart_cart_details = new(int)
				*cd.cart_cart_details = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCart queries the "cart" edge of the CartDetail entity.
func (cd *CartDetail) QueryCart() *CartQuery {
	return (&CartDetailClient{config: cd.config}).QueryCart(cd)
}

// Update returns a builder for updating this CartDetail.
// Note that you need to call CartDetail.Unwrap() before calling this method if this CartDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CartDetail) Update() *CartDetailUpdateOne {
	return (&CartDetailClient{config: cd.config}).UpdateOne(cd)
}

// Unwrap unwraps the CartDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CartDetail) Unwrap() *CartDetail {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CartDetail is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CartDetail) String() string {
	var builder strings.Builder
	builder.WriteString("CartDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.AccountID))
	builder.WriteString(", ")
	builder.WriteString("visitor_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.VisitorID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.ProductID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", cd.Data))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", cd.Options))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", cd.Quantity))
	builder.WriteString(", ")
	if v := cd.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.Tax; v != nil {
		builder.WriteString("tax=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.TaxRate; v != nil {
		builder.WriteString("tax_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.DiscountID; v != nil {
		builder.WriteString("discount_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.DiscountName; v != nil {
		builder.WriteString("discount_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cd.DiscountClass; v != nil {
		builder.WriteString("discount_class=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.DiscountRate; v != nil {
		builder.WriteString("discount_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cd.DiscountPrice; v != nil {
		builder.WriteString("discount_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CartDetails is a parsable slice of CartDetail.
type CartDetails []*CartDetail

func (cd CartDetails) config(cfg config) {
	for _i := range cd {
		cd[_i].config = cfg
	}
}
