// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"selfregi/ent/account"
	"selfregi/ent/cart"
	"selfregi/ent/visitor"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorCreate is the builder for creating a Visitor entity.
type VisitorCreate struct {
	config
	mutation *VisitorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vc *VisitorCreate) SetCreatedAt(t time.Time) *VisitorCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableCreatedAt(t *time.Time) *VisitorCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VisitorCreate) SetUpdatedAt(t time.Time) *VisitorCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableUpdatedAt(t *time.Time) *VisitorCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VisitorCreate) SetDeletedAt(t time.Time) *VisitorCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableDeletedAt(t *time.Time) *VisitorCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetName sets the "name" field.
func (vc *VisitorCreate) SetName(s string) *VisitorCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableName(s *string) *VisitorCreate {
	if s != nil {
		vc.SetName(*s)
	}
	return vc
}

// SetSex sets the "sex" field.
func (vc *VisitorCreate) SetSex(i int) *VisitorCreate {
	vc.mutation.SetSex(i)
	return vc
}

// SetBillStatus sets the "bill_status" field.
func (vc *VisitorCreate) SetBillStatus(i int) *VisitorCreate {
	vc.mutation.SetBillStatus(i)
	return vc
}

// AddManagedAccountIDs adds the "managed_accounts" edge to the Account entity by IDs.
func (vc *VisitorCreate) AddManagedAccountIDs(ids ...int) *VisitorCreate {
	vc.mutation.AddManagedAccountIDs(ids...)
	return vc
}

// AddManagedAccounts adds the "managed_accounts" edges to the Account entity.
func (vc *VisitorCreate) AddManagedAccounts(a ...*Account) *VisitorCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vc.AddManagedAccountIDs(ids...)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (vc *VisitorCreate) AddCartIDs(ids ...int) *VisitorCreate {
	vc.mutation.AddCartIDs(ids...)
	return vc
}

// AddCarts adds the "carts" edges to the Cart entity.
func (vc *VisitorCreate) AddCarts(c ...*Cart) *VisitorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vc.AddCartIDs(ids...)
}

// Mutation returns the VisitorMutation object of the builder.
func (vc *VisitorCreate) Mutation() *VisitorMutation {
	return vc.mutation
}

// Save creates the Visitor in the database.
func (vc *VisitorCreate) Save(ctx context.Context) (*Visitor, error) {
	var (
		err  error
		node *Visitor
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Visitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VisitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VisitorCreate) SaveX(ctx context.Context) *Visitor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VisitorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VisitorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VisitorCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := visitor.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := visitor.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.Name(); !ok {
		v := visitor.DefaultName
		vc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VisitorCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Visitor.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Visitor.updated_at"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Visitor.name"`)}
	}
	if _, ok := vc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "Visitor.sex"`)}
	}
	if _, ok := vc.mutation.BillStatus(); !ok {
		return &ValidationError{Name: "bill_status", err: errors.New(`ent: missing required field "Visitor.bill_status"`)}
	}
	return nil
}

func (vc *VisitorCreate) sqlSave(ctx context.Context) (*Visitor, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VisitorCreate) createSpec() (*Visitor, *sqlgraph.CreateSpec) {
	var (
		_node = &Visitor{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: visitor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(visitor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(visitor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(visitor.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(visitor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.Sex(); ok {
		_spec.SetField(visitor.FieldSex, field.TypeInt, value)
		_node.Sex = value
	}
	if value, ok := vc.mutation.BillStatus(); ok {
		_spec.SetField(visitor.FieldBillStatus, field.TypeInt, value)
		_node.BillStatus = value
	}
	if nodes := vc.mutation.ManagedAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.ManagedAccountsTable,
			Columns: []string{visitor.ManagedAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   visitor.CartsTable,
			Columns: []string{visitor.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VisitorCreateBulk is the builder for creating many Visitor entities in bulk.
type VisitorCreateBulk struct {
	config
	builders []*VisitorCreate
}

// Save creates the Visitor entities in the database.
func (vcb *VisitorCreateBulk) Save(ctx context.Context) ([]*Visitor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Visitor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VisitorCreateBulk) SaveX(ctx context.Context) []*Visitor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VisitorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VisitorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
