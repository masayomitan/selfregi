// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"selfregi/ent/account"
	"selfregi/ent/visitor"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// VisitorID holds the value of the "visitor_id" field.
	VisitorID int `json:"visitor_id,omitempty"`
	// Status holds the value of the "status" field.
	Status *uint `json:"status,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal *int `json:"subtotal,omitempty"`
	// Total holds the value of the "total" field.
	Total *int `json:"total,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax *int `json:"tax,omitempty"`
	// TaxRate holds the value of the "tax_rate" field.
	TaxRate *int `json:"tax_rate,omitempty"`
	// DiscountClass holds the value of the "discount_class" field.
	DiscountClass *uint `json:"discount_class,omitempty"`
	// DiscountRate holds the value of the "discount_rate" field.
	DiscountRate *decimal.Decimal `json:"discount_rate,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice *int `json:"discount_price,omitempty"`
	// PaidPrice holds the value of the "paid_price" field.
	PaidPrice *int `json:"paid_price,omitempty"`
	// Change holds the value of the "change" field.
	Change *int `json:"change,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges                    AccountEdges `json:"edges"`
	visitor_managed_accounts *int
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// ManagedAccountDetails holds the value of the managed_account_details edge.
	ManagedAccountDetails []*AccountDetail `json:"managed_account_details,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *Visitor `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ManagedAccountDetailsOrErr returns the ManagedAccountDetails value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) ManagedAccountDetailsOrErr() ([]*AccountDetail, error) {
	if e.loadedTypes[0] {
		return e.ManagedAccountDetails, nil
	}
	return nil, &NotLoadedError{edge: "managed_account_details"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) OwnerOrErr() (*Visitor, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: visitor.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldDiscountRate:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case account.FieldID, account.FieldVisitorID, account.FieldStatus, account.FieldSubtotal, account.FieldTotal, account.FieldTax, account.FieldTaxRate, account.FieldDiscountClass, account.FieldDiscountPrice, account.FieldPaidPrice, account.FieldChange:
			values[i] = new(sql.NullInt64)
		case account.FieldCreatedAt, account.FieldUpdatedAt, account.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case account.ForeignKeys[0]: // visitor_managed_accounts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case account.FieldVisitorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visitor_id", values[i])
			} else if value.Valid {
				a.VisitorID = int(value.Int64)
			}
		case account.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = new(uint)
				*a.Status = uint(value.Int64)
			}
		case account.FieldSubtotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value.Valid {
				a.Subtotal = new(int)
				*a.Subtotal = int(value.Int64)
			}
		case account.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				a.Total = new(int)
				*a.Total = int(value.Int64)
			}
		case account.FieldTax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				a.Tax = new(int)
				*a.Tax = int(value.Int64)
			}
		case account.FieldTaxRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate", values[i])
			} else if value.Valid {
				a.TaxRate = new(int)
				*a.TaxRate = int(value.Int64)
			}
		case account.FieldDiscountClass:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_class", values[i])
			} else if value.Valid {
				a.DiscountClass = new(uint)
				*a.DiscountClass = uint(value.Int64)
			}
		case account.FieldDiscountRate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discount_rate", values[i])
			} else if value.Valid {
				a.DiscountRate = new(decimal.Decimal)
				*a.DiscountRate = *value.S.(*decimal.Decimal)
			}
		case account.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				a.DiscountPrice = new(int)
				*a.DiscountPrice = int(value.Int64)
			}
		case account.FieldPaidPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paid_price", values[i])
			} else if value.Valid {
				a.PaidPrice = new(int)
				*a.PaidPrice = int(value.Int64)
			}
		case account.FieldChange:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field change", values[i])
			} else if value.Valid {
				a.Change = new(int)
				*a.Change = int(value.Int64)
			}
		case account.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field visitor_managed_accounts", value)
			} else if value.Valid {
				a.visitor_managed_accounts = new(int)
				*a.visitor_managed_accounts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryManagedAccountDetails queries the "managed_account_details" edge of the Account entity.
func (a *Account) QueryManagedAccountDetails() *AccountDetailQuery {
	return (&AccountClient{config: a.config}).QueryManagedAccountDetails(a)
}

// QueryOwner queries the "owner" edge of the Account entity.
func (a *Account) QueryOwner() *VisitorQuery {
	return (&AccountClient{config: a.config}).QueryOwner(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("visitor_id=")
	builder.WriteString(fmt.Sprintf("%v", a.VisitorID))
	builder.WriteString(", ")
	if v := a.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Subtotal; v != nil {
		builder.WriteString("subtotal=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Total; v != nil {
		builder.WriteString("total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Tax; v != nil {
		builder.WriteString("tax=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.TaxRate; v != nil {
		builder.WriteString("tax_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DiscountClass; v != nil {
		builder.WriteString("discount_class=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DiscountRate; v != nil {
		builder.WriteString("discount_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.DiscountPrice; v != nil {
		builder.WriteString("discount_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.PaidPrice; v != nil {
		builder.WriteString("paid_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.Change; v != nil {
		builder.WriteString("change=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
