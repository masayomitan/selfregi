// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"selfregi/ent/account"
	"selfregi/ent/accountdetail"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// AccountDetail is the model entity for the AccountDetail schema.
type AccountDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// VisitorID holds the value of the "visitor_id" field.
	VisitorID int `json:"visitor_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// Data holds the value of the "data" field.
	Data []string `json:"data,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price *int `json:"price,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax *int `json:"tax,omitempty"`
	// TaxRate holds the value of the "tax_rate" field.
	TaxRate *int `json:"tax_rate,omitempty"`
	// DiscountID holds the value of the "discount_id" field.
	DiscountID *int `json:"discount_id,omitempty"`
	// DiscountName holds the value of the "discount_name" field.
	DiscountName *string `json:"discount_name,omitempty"`
	// DiscountClass holds the value of the "discount_class" field.
	DiscountClass *uint `json:"discount_class,omitempty"`
	// DiscountRate holds the value of the "discount_rate" field.
	DiscountRate *decimal.Decimal `json:"discount_rate,omitempty"`
	// DiscountPrice holds the value of the "discount_price" field.
	DiscountPrice *int `json:"discount_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountDetailQuery when eager-loading is set.
	Edges                           AccountDetailEdges `json:"edges"`
	account_managed_account_details *int
}

// AccountDetailEdges holds the relations/edges for other nodes in the graph.
type AccountDetailEdges struct {
	// ManagedAccount holds the value of the managed_account edge.
	ManagedAccount *Account `json:"managed_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ManagedAccountOrErr returns the ManagedAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountDetailEdges) ManagedAccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.ManagedAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.ManagedAccount, nil
	}
	return nil, &NotLoadedError{edge: "managed_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountdetail.FieldDiscountRate:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case accountdetail.FieldData, accountdetail.FieldOptions:
			values[i] = new([]byte)
		case accountdetail.FieldID, accountdetail.FieldAccountID, accountdetail.FieldVisitorID, accountdetail.FieldProductID, accountdetail.FieldCategoryID, accountdetail.FieldQuantity, accountdetail.FieldPrice, accountdetail.FieldTax, accountdetail.FieldTaxRate, accountdetail.FieldDiscountID, accountdetail.FieldDiscountClass, accountdetail.FieldDiscountPrice:
			values[i] = new(sql.NullInt64)
		case accountdetail.FieldDiscountName:
			values[i] = new(sql.NullString)
		case accountdetail.FieldCreatedAt, accountdetail.FieldUpdatedAt, accountdetail.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case accountdetail.ForeignKeys[0]: // account_managed_account_details
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountDetail fields.
func (ad *AccountDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ad.ID = int(value.Int64)
		case accountdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ad.CreatedAt = value.Time
			}
		case accountdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ad.UpdatedAt = value.Time
			}
		case accountdetail.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ad.DeletedAt = new(time.Time)
				*ad.DeletedAt = value.Time
			}
		case accountdetail.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				ad.AccountID = int(value.Int64)
			}
		case accountdetail.FieldVisitorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visitor_id", values[i])
			} else if value.Valid {
				ad.VisitorID = int(value.Int64)
			}
		case accountdetail.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				ad.ProductID = int(value.Int64)
			}
		case accountdetail.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ad.CategoryID = int(value.Int64)
			}
		case accountdetail.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ad.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case accountdetail.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ad.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case accountdetail.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ad.Quantity = int(value.Int64)
			}
		case accountdetail.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ad.Price = new(int)
				*ad.Price = int(value.Int64)
			}
		case accountdetail.FieldTax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				ad.Tax = new(int)
				*ad.Tax = int(value.Int64)
			}
		case accountdetail.FieldTaxRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax_rate", values[i])
			} else if value.Valid {
				ad.TaxRate = new(int)
				*ad.TaxRate = int(value.Int64)
			}
		case accountdetail.FieldDiscountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_id", values[i])
			} else if value.Valid {
				ad.DiscountID = new(int)
				*ad.DiscountID = int(value.Int64)
			}
		case accountdetail.FieldDiscountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_name", values[i])
			} else if value.Valid {
				ad.DiscountName = new(string)
				*ad.DiscountName = value.String
			}
		case accountdetail.FieldDiscountClass:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_class", values[i])
			} else if value.Valid {
				ad.DiscountClass = new(uint)
				*ad.DiscountClass = uint(value.Int64)
			}
		case accountdetail.FieldDiscountRate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field discount_rate", values[i])
			} else if value.Valid {
				ad.DiscountRate = new(decimal.Decimal)
				*ad.DiscountRate = *value.S.(*decimal.Decimal)
			}
		case accountdetail.FieldDiscountPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price", values[i])
			} else if value.Valid {
				ad.DiscountPrice = new(int)
				*ad.DiscountPrice = int(value.Int64)
			}
		case accountdetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_managed_account_details", value)
			} else if value.Valid {
				ad.account_managed_account_details = new(int)
				*ad.account_managed_account_details = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryManagedAccount queries the "managed_account" edge of the AccountDetail entity.
func (ad *AccountDetail) QueryManagedAccount() *AccountQuery {
	return (&AccountDetailClient{config: ad.config}).QueryManagedAccount(ad)
}

// Update returns a builder for updating this AccountDetail.
// Note that you need to call AccountDetail.Unwrap() before calling this method if this AccountDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *AccountDetail) Update() *AccountDetailUpdateOne {
	return (&AccountDetailClient{config: ad.config}).UpdateOne(ad)
}

// Unwrap unwraps the AccountDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *AccountDetail) Unwrap() *AccountDetail {
	_tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountDetail is not a transactional entity")
	}
	ad.config.driver = _tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *AccountDetail) String() string {
	var builder strings.Builder
	builder.WriteString("AccountDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ad.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ad.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ad.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ad.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.AccountID))
	builder.WriteString(", ")
	builder.WriteString("visitor_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.VisitorID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.ProductID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", ad.Data))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", ad.Options))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ad.Quantity))
	builder.WriteString(", ")
	if v := ad.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.Tax; v != nil {
		builder.WriteString("tax=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.TaxRate; v != nil {
		builder.WriteString("tax_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.DiscountID; v != nil {
		builder.WriteString("discount_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.DiscountName; v != nil {
		builder.WriteString("discount_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ad.DiscountClass; v != nil {
		builder.WriteString("discount_class=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.DiscountRate; v != nil {
		builder.WriteString("discount_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ad.DiscountPrice; v != nil {
		builder.WriteString("discount_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AccountDetails is a parsable slice of AccountDetail.
type AccountDetails []*AccountDetail

func (ad AccountDetails) config(cfg config) {
	for _i := range ad {
		ad[_i].config = cfg
	}
}
