// Code generated by ent, DO NOT EDIT.

package cartdetail

import (
	"selfregi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// VisitorID applies equality check predicate on the "visitor_id" field. It's identical to VisitorIDEQ.
func VisitorID(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitorID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTax), v))
	})
}

// TaxRate applies equality check predicate on the "tax_rate" field. It's identical to TaxRateEQ.
func TaxRate(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxRate), v))
	})
}

// DiscountID applies equality check predicate on the "discount_id" field. It's identical to DiscountIDEQ.
func DiscountID(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountID), v))
	})
}

// DiscountName applies equality check predicate on the "discount_name" field. It's identical to DiscountNameEQ.
func DiscountName(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountName), v))
	})
}

// DiscountClass applies equality check predicate on the "discount_class" field. It's identical to DiscountClassEQ.
func DiscountClass(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountClass), v))
	})
}

// DiscountRate applies equality check predicate on the "discount_rate" field. It's identical to DiscountRateEQ.
func DiscountRate(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountRate), v))
	})
}

// DiscountPrice applies equality check predicate on the "discount_price" field. It's identical to DiscountPriceEQ.
func DiscountPrice(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// VisitorIDEQ applies the EQ predicate on the "visitor_id" field.
func VisitorIDEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitorID), v))
	})
}

// VisitorIDNEQ applies the NEQ predicate on the "visitor_id" field.
func VisitorIDNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisitorID), v))
	})
}

// VisitorIDIn applies the In predicate on the "visitor_id" field.
func VisitorIDIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVisitorID), v...))
	})
}

// VisitorIDNotIn applies the NotIn predicate on the "visitor_id" field.
func VisitorIDNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVisitorID), v...))
	})
}

// VisitorIDGT applies the GT predicate on the "visitor_id" field.
func VisitorIDGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisitorID), v))
	})
}

// VisitorIDGTE applies the GTE predicate on the "visitor_id" field.
func VisitorIDGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisitorID), v))
	})
}

// VisitorIDLT applies the LT predicate on the "visitor_id" field.
func VisitorIDLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisitorID), v))
	})
}

// VisitorIDLTE applies the LTE predicate on the "visitor_id" field.
func VisitorIDLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisitorID), v))
	})
}

// VisitorIDIsNil applies the IsNil predicate on the "visitor_id" field.
func VisitorIDIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisitorID)))
	})
}

// VisitorIDNotNil applies the NotNil predicate on the "visitor_id" field.
func VisitorIDNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisitorID)))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductID)))
	})
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductID)))
	})
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryID), v))
	})
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCategoryID)))
	})
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCategoryID)))
	})
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldData)))
	})
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldData)))
	})
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	})
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTax), v))
	})
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTax), v))
	})
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTax), v...))
	})
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTax), v...))
	})
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTax), v))
	})
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTax), v))
	})
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTax), v))
	})
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTax), v))
	})
}

// TaxRateEQ applies the EQ predicate on the "tax_rate" field.
func TaxRateEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxRate), v))
	})
}

// TaxRateNEQ applies the NEQ predicate on the "tax_rate" field.
func TaxRateNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxRate), v))
	})
}

// TaxRateIn applies the In predicate on the "tax_rate" field.
func TaxRateIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaxRate), v...))
	})
}

// TaxRateNotIn applies the NotIn predicate on the "tax_rate" field.
func TaxRateNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaxRate), v...))
	})
}

// TaxRateGT applies the GT predicate on the "tax_rate" field.
func TaxRateGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxRate), v))
	})
}

// TaxRateGTE applies the GTE predicate on the "tax_rate" field.
func TaxRateGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxRate), v))
	})
}

// TaxRateLT applies the LT predicate on the "tax_rate" field.
func TaxRateLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxRate), v))
	})
}

// TaxRateLTE applies the LTE predicate on the "tax_rate" field.
func TaxRateLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxRate), v))
	})
}

// DiscountIDEQ applies the EQ predicate on the "discount_id" field.
func DiscountIDEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountID), v))
	})
}

// DiscountIDNEQ applies the NEQ predicate on the "discount_id" field.
func DiscountIDNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountID), v))
	})
}

// DiscountIDIn applies the In predicate on the "discount_id" field.
func DiscountIDIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountID), v...))
	})
}

// DiscountIDNotIn applies the NotIn predicate on the "discount_id" field.
func DiscountIDNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountID), v...))
	})
}

// DiscountIDGT applies the GT predicate on the "discount_id" field.
func DiscountIDGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountID), v))
	})
}

// DiscountIDGTE applies the GTE predicate on the "discount_id" field.
func DiscountIDGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountID), v))
	})
}

// DiscountIDLT applies the LT predicate on the "discount_id" field.
func DiscountIDLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountID), v))
	})
}

// DiscountIDLTE applies the LTE predicate on the "discount_id" field.
func DiscountIDLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountID), v))
	})
}

// DiscountIDIsNil applies the IsNil predicate on the "discount_id" field.
func DiscountIDIsNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiscountID)))
	})
}

// DiscountIDNotNil applies the NotNil predicate on the "discount_id" field.
func DiscountIDNotNil() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiscountID)))
	})
}

// DiscountNameEQ applies the EQ predicate on the "discount_name" field.
func DiscountNameEQ(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountName), v))
	})
}

// DiscountNameNEQ applies the NEQ predicate on the "discount_name" field.
func DiscountNameNEQ(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountName), v))
	})
}

// DiscountNameIn applies the In predicate on the "discount_name" field.
func DiscountNameIn(vs ...string) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountName), v...))
	})
}

// DiscountNameNotIn applies the NotIn predicate on the "discount_name" field.
func DiscountNameNotIn(vs ...string) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountName), v...))
	})
}

// DiscountNameGT applies the GT predicate on the "discount_name" field.
func DiscountNameGT(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountName), v))
	})
}

// DiscountNameGTE applies the GTE predicate on the "discount_name" field.
func DiscountNameGTE(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountName), v))
	})
}

// DiscountNameLT applies the LT predicate on the "discount_name" field.
func DiscountNameLT(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountName), v))
	})
}

// DiscountNameLTE applies the LTE predicate on the "discount_name" field.
func DiscountNameLTE(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountName), v))
	})
}

// DiscountNameContains applies the Contains predicate on the "discount_name" field.
func DiscountNameContains(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscountName), v))
	})
}

// DiscountNameHasPrefix applies the HasPrefix predicate on the "discount_name" field.
func DiscountNameHasPrefix(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscountName), v))
	})
}

// DiscountNameHasSuffix applies the HasSuffix predicate on the "discount_name" field.
func DiscountNameHasSuffix(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscountName), v))
	})
}

// DiscountNameEqualFold applies the EqualFold predicate on the "discount_name" field.
func DiscountNameEqualFold(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscountName), v))
	})
}

// DiscountNameContainsFold applies the ContainsFold predicate on the "discount_name" field.
func DiscountNameContainsFold(v string) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscountName), v))
	})
}

// DiscountClassEQ applies the EQ predicate on the "discount_class" field.
func DiscountClassEQ(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountClass), v))
	})
}

// DiscountClassNEQ applies the NEQ predicate on the "discount_class" field.
func DiscountClassNEQ(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountClass), v))
	})
}

// DiscountClassIn applies the In predicate on the "discount_class" field.
func DiscountClassIn(vs ...uint) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountClass), v...))
	})
}

// DiscountClassNotIn applies the NotIn predicate on the "discount_class" field.
func DiscountClassNotIn(vs ...uint) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountClass), v...))
	})
}

// DiscountClassGT applies the GT predicate on the "discount_class" field.
func DiscountClassGT(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountClass), v))
	})
}

// DiscountClassGTE applies the GTE predicate on the "discount_class" field.
func DiscountClassGTE(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountClass), v))
	})
}

// DiscountClassLT applies the LT predicate on the "discount_class" field.
func DiscountClassLT(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountClass), v))
	})
}

// DiscountClassLTE applies the LTE predicate on the "discount_class" field.
func DiscountClassLTE(v uint) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountClass), v))
	})
}

// DiscountRateEQ applies the EQ predicate on the "discount_rate" field.
func DiscountRateEQ(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountRate), v))
	})
}

// DiscountRateNEQ applies the NEQ predicate on the "discount_rate" field.
func DiscountRateNEQ(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountRate), v))
	})
}

// DiscountRateIn applies the In predicate on the "discount_rate" field.
func DiscountRateIn(vs ...decimal.Decimal) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountRate), v...))
	})
}

// DiscountRateNotIn applies the NotIn predicate on the "discount_rate" field.
func DiscountRateNotIn(vs ...decimal.Decimal) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountRate), v...))
	})
}

// DiscountRateGT applies the GT predicate on the "discount_rate" field.
func DiscountRateGT(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountRate), v))
	})
}

// DiscountRateGTE applies the GTE predicate on the "discount_rate" field.
func DiscountRateGTE(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountRate), v))
	})
}

// DiscountRateLT applies the LT predicate on the "discount_rate" field.
func DiscountRateLT(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountRate), v))
	})
}

// DiscountRateLTE applies the LTE predicate on the "discount_rate" field.
func DiscountRateLTE(v decimal.Decimal) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountRate), v))
	})
}

// DiscountPriceEQ applies the EQ predicate on the "discount_price" field.
func DiscountPriceEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceNEQ applies the NEQ predicate on the "discount_price" field.
func DiscountPriceNEQ(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceIn applies the In predicate on the "discount_price" field.
func DiscountPriceIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceNotIn applies the NotIn predicate on the "discount_price" field.
func DiscountPriceNotIn(vs ...int) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceGT applies the GT predicate on the "discount_price" field.
func DiscountPriceGT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceGTE applies the GTE predicate on the "discount_price" field.
func DiscountPriceGTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLT applies the LT predicate on the "discount_price" field.
func DiscountPriceLT(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLTE applies the LTE predicate on the "discount_price" field.
func DiscountPriceLTE(v int) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountPrice), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CartDetail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// HasCart applies the HasEdge predicate on the "cart" edge.
func HasCart() predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CartTable, CartColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartWith applies the HasEdge predicate on the "cart" edge with a given conditions (other predicates).
func HasCartWith(preds ...predicate.Cart) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CartTable, CartColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CartDetail) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CartDetail) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CartDetail) predicate.CartDetail {
	return predicate.CartDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
